<!doctype html>
<!--[if lt IE 7]><html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if (IE 7)&!(IEMobile)]><html class="no-js lt-ie9 lt-ie8" lang="en"><![endif]-->
<!--[if (IE 8)&!(IEMobile)]><html class="no-js lt-ie9" lang="en"><![endif]-->
<!--[if gt IE 8]><!--> <html class="no-js" lang="en"><!--<![endif]-->
<head>
<meta charset="utf-8">
<title>A Complete React Redux Tutorial for Beginners (2019)</title>
<meta name="description" content="Perfect for beginners. Learn to use Redux with React, starting with plain React. Reducers, actions, thunks, fetching data - understand the jargon and how it all fits together.">
<meta name="keywords" content="redux, react, react redux">


<!-- Twitter Cards -->
<meta name="twitter:title" content="A Complete React Redux Tutorial for Beginners (2019)">
<meta name="twitter:description" content="Perfect for beginners. Learn to use Redux with React, starting with plain React. Reducers, actions, thunks, fetching data - understand the jargon and how it all fits together.">
<meta name="twitter:site" content="@dceddia">
<meta name="twitter:creator" content="@dceddia">

<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:image" content="https://daveceddia.com/images/complete-redux-tutorial-2019.png">

<!-- Open Graph -->
<meta property="og:locale" content="en_US">
<meta property="og:type" content="article">
<meta property="og:title" content="A Complete React Redux Tutorial for Beginners (2019)">
<meta property="og:description" content="Perfect for beginners. Learn to use Redux with React, starting with plain React. Reducers, actions, thunks, fetching data - understand the jargon and how it all fits together.">

<meta property="og:image" content="https://daveceddia.com/images/complete-redux-tutorial-2019.png">

<meta property="og:url" content="https://daveceddia.com/redux-tutorial/">
<meta property="og:site_name" content="Dave Ceddia">






<link href="https://fonts.googleapis.com/css?family=Montserrat:400|PT+Serif:400,400i,700" rel="stylesheet">
<link rel="preconnect" href="https://fonts.gstatic.com">
<link rel="canonical" href="https://daveceddia.com/redux-tutorial/">
<link href="https://daveceddia.com/feed.xml" type="application/atom+xml" rel="alternate" title="Dave Ceddia Feed">

<!-- http://t.co/dKP3o1e -->
<meta name="HandheldFriendly" content="True">
<meta name="MobileOptimized" content="320">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta property="fb:admins" content="50205984" />

<meta property="dc:page_id" content="redux-tutorial">

<!-- For all browsers -->
<link rel="stylesheet" type="text/css" href="https://daveceddia.com/assets/css/site.min.css?v=4">

<!-- Preload the CSS and fonts for Commento if we have comments -->

  <link rel="preload" href="https://commento.daveceddia.com/css/commento.css" as="style">
  <link rel="preload" href="https://commento.daveceddia.com/fonts/source-sans-400-latin.woff2" as="font" type="font/woff2" crossorigin>
  <link rel="preload" href="https://commento.daveceddia.com/fonts/source-sans-700-latin.woff2" as="font" type="font/woff2" crossorigin>




<!-- Webfonts -->

<meta http-equiv="cleartype" content="on">

<!-- HTML5 Shiv and Media Query Support -->
<!--[if lt IE 9]>
  <script src="https://daveceddia.com/assets/js/vendor/html5shiv.min.js"></script>
  <script src="https://daveceddia.com/assets/js/vendor/respond.min.js"></script>
<![endif]-->

<!-- Icons -->
<!-- 16x16 -->
<link rel="shortcut icon" href="https://daveceddia.com/favicon.ico?v=2">
<!-- 32x32 -->
<link rel="shortcut icon" href="https://daveceddia.com/favicon.png?v=2">
<!-- 57x57 (precomposed) for iPhone 3GS, pre-2011 iPod Touch and older Android devices -->
<link rel="apple-touch-icon-precomposed" href="https://daveceddia.com/images/apple-touch-icon-precomposed.png">
<!-- 72x72 (precomposed) for 1st generation iPad, iPad 2 and iPad mini -->
<link rel="apple-touch-icon-precomposed" sizes="72x72" href="https://daveceddia.com/images/apple-touch-icon-72x72-precomposed.png">
<!-- 114x114 (precomposed) for iPhone 4, 4S, 5 and post-2011 iPod Touch -->
<link rel="apple-touch-icon-precomposed" sizes="114x114" href="https://daveceddia.com/images/apple-touch-icon-114x114-precomposed.png">
<!-- 144x144 (precomposed) for iPad 3rd and 4th generation -->
<link rel="apple-touch-icon-precomposed" sizes="144x144" href="https://daveceddia.com/images/apple-touch-icon-144x144-precomposed.png">

</head>

<body id="post">

<nav role="navigation" id="site-nav">
	<header>
    
		<a href="https://daveceddia.com/" class="site-logo" rel="home" title="Dave Ceddia">
      <img
        src="https://daveceddia.com/images/logo.png"
        srcset="https://daveceddia.com/images/logo@2x.png 2x"
        alt="Dave Ceddia logo"/>
		</a>
    
    <h1 class="site-title"><a href="https://daveceddia.com/">Dave Ceddia</a></h1>
		<h2 class="site-description" itemprop="description">Articles to help you learn and master frontend development with React.</h2>
	</header>
  <ul>
  
    
    <li>
    	<a  href="https://daveceddia.com/courses/" >Courses</a>
    </li>
  
    
    <li>
    	<a  href="https://daveceddia.com/archives/" >All Posts</a>
    </li>
  
    
    <li>
    	<a  href="https://daveceddia.com/about/" >About</a>
    </li>
  
  </ul>
</nav>


<div id="main" role="main">
  <article class="hentry">
    <div class="entry-wrapper">
      <header class="entry-header">
        <span class="entry-tags"><a href="https://daveceddia.com/tags/#redux" title="Pages tagged redux">redux</a>&nbsp;&bull;&nbsp;<a href="https://daveceddia.com/tags/#react" title="Pages tagged react">react</a>&nbsp;&bull;&nbsp;<a href="https://daveceddia.com/tags/#react redux" title="Pages tagged react redux">react redux</a></span>
        
          <h1 class="entry-title">A Complete React Redux Tutorial for Beginners (2019)</h1>
        
      </header>
      <footer class="entry-meta muted-centered" style="color: #3b5e82;">
        
        <span class="author vcard">By <span class="fn">Dave Ceddia</span></span>
        
          
            <span class="entry-date date published"><time datetime="2019-03-10T17:35:40+00:00"><i class="fa fa-calendar-o"></i> March 10, 2019</time></span>
          
        
        
      </footer>
      <div class="entry-content">
        
        <p><img src="https://daveceddia.com/images/complete-redux-tutorial-2019.png" srcset="https://daveceddia.com/images/complete-redux-tutorial-2019@2x.png 2x" alt="A Complete Redux Tutorial (2019): why use it? - store - reducers - actions - thunks - data fetching" /></p>

<p>Trying to understand Redux, it‚Äôs really confusing how it all works. Especially as a beginner.</p>

<p>So much terminology! Actions, reducers, action creators, middleware, pure functions, immutability, thunks‚Ä¶</p>

<p>How does it all fit together with React to make a working app?</p>

<p>You can spend hours reading blogs and trying to sift through complex ‚Äúreal world‚Äù apps trying to piece it together.</p>

<p>In this Redux tutorial I‚Äôm going to explain how to use Redux with React incrementally ‚Äì starting with plain React ‚Äì and a very simple React + Redux example. I‚Äôll explain <em>why</em> each feature is useful (and when you can skip some).</p>

<p>Then we‚Äôll look at the more advanced topics, one-by-one, until you understand <em>all of it</em>. Here we go :)</p>

<p>Quick warning though: this tutorial is <em>compleeete</em>. And by that I mean <em>looong</em>. I turned this into a full-fledged free course, <em>and</em> I made a nice-looking PDF you can read on your iPad or [whatever Android device is cool these days]. Drop your email in the box to get both right now.</p>

<div>
  <div class="dc_form_container refactoring-to-redux">
    <div class="dc_success_msg" style="display:none;">
      Success! Now check your email.
    </div>

    <!--  Form starts here  -->
    
    <form class="dc_signup_form" action="/s/signup" method="POST">
    
      <h4 class="dc_title">
</h4>
      <div class="dc_description">
        
  <p>This tutorial is 43 pages of awesome. Take it as a course üëá </p>

      </div>

      <div class="dc_error_msg" style="display:none">
        There was an error submitting your subscription. Please try again.
      </div>

      <div class="dc_field">
        <label class="dc_label" for="dc_email" style="display: none">Email Address</label>
        <input type="email" name="email" placeholder="Your email address" required="" />
      </div>
      <input type="hidden" name="page_id" value="redux-tutorial" />
      <input type="hidden" name="form_id" value="redux-course-coming-soon" />
      <input type="hidden" name="form_version" value="1" />
      <input type="hidden" name="tag" value="823945,823523" />
      <button class="dc_subscribe_button" type="submit">
        Get the Course + PDF
      </button>
      <div class="dc_guarantee">
        You'll also get a few emails to help you get started
      </div>
    </form>

    
<form class="dc_gdpr_form" action="/s/signup/gdpr" method="POST" style="display:none;">

  <p>Before we go on, I have to ask...</p>
  <div class="dc_form_field">
    <label>
      <input type="checkbox" name="confirm_answer" value="true" />
      <span>consent</span>
    </label>
  </div>
  <br />

  <div class="dc_error_msg" style="display:none">
    There was an error submitting your subscription. Please try again.
  </div>

  <input type="hidden" name="email" value="FILL_IN_WITH_JS" />
  <input type="hidden" name="firstName" value="FILL_IN_WITH_JS" />
  <input type="hidden" name="gdpr" value="FILL_IN_WITH_JS" />
  <input type="hidden" name="captcha" value="FILL_IN_WITH_JS" />
  <input type="hidden" name="sign" value="FILL_IN_WITH_JS" />
  <input type="hidden" name="confirm" value="FILL_IN_WITH_JS" />
  <input type="hidden" name="tag" value="823945" />
  <input type="hidden" name="page_id" value="redux-tutorial" />
  <input type="hidden" name="form_id" value="redux-course-coming-soon" />
  <input type="hidden" name="form_version" value="1" />
  <button type="submit" class="dc_subscribe_button">
    Finish
  </button>
</form>

  </div>

  <style type="text/css">
    .dc_form_container {
      border-top: 4px solid #3166de;
      border-bottom: 4px solid #3166de;
      padding: 1em;
      background: #f8faff;
      font-family: "Open Sans", sans-serif;
      margin-bottom: 2.5rem;
    }
    .dc_form_container .dc_title {
      margin-top: 0;
      text-align: center;
      font-weight: 400;
      font-size: 30px;
    }
    .dc_form_container .dc_description {
      margin-bottom: 10px;
    }
    .dc_signup_form, .dc_gdpr_form {
      margin-bottom: 0;
      position: relative;
    }
    .dc_signup_form input, .dc_gdpr_form input {
      width: 100%;
      padding: 20px 12px;
    }
    .dc_gdpr_form input[type="checkbox"] {
      width: initial;
      margin: 0;
      margin-right: 5px;
    }
    .dc_subscribe_button {
      margin: 0 auto;
      display: block;
      width: 100%;
      max-width: 250px;
      font-size: 18px;
      background: orange;
      color: #583900;
      border-color: #e29609;
      height: auto;
      margin-bottom: 5px;
    }
    .dc_subscribe_button[disabled] {
      opacity: 0.5;
    }
    .dc_subscribe_button[disabled]:hover {
      opacity: 0.5;
      color: #583900;
    }
    .dc_guarantee {
      font-size: 12px;
      text-align: center;
      opacity: 0.7;
    }
    .dc_success_msg {
      padding: 10px;
      background: #fff;
      border: 1px solid #8dc74a;
      border-radius: 2px;
      background: #F1F8E9;
      text-align: center;
    }
    .dc_error_msg {
      background: #FFEBEE;
      padding: 10px;
      margin-bottom: 5px;
      border: 2px solid #C62828;
    }
  </style>
</div>

<style>
.dc_form_container.refactoring-to-redux {
  border-top: 1px solid #6540b9;
  border-bottom: 1px solid #6540b9;
  border-left: 1px solid #d1d1d1;
  border-right: 1px solid #d1d1d1;
  background: #fbf9ff;
  padding: 5%;
}
.refactoring-to-redux .dc_subscribe_button {
  background: #6228d6;
  color: #fff;
  border: none;
  max-width: 100%;
}
.refactoring-to-redux .dc_subscribe_button:hover {
  border: none;
}
.refactoring-to-redux h3 { display: none; }
</style>

<p>(I know how the browser tabs spiral out of control. So many fun things to read, so little time!)</p>

<h2 id="redux-essentials-in-one-video">Redux Essentials in One Video</h2>

<p>If you prefer watching to reading, this video covers how to add Redux to a React app step-by-step:</p>

<div class="video-embed">
  <div class="video-placeholder">
    <img src="https://daveceddia.com/images/sX3KeP7v7Kg.jpg" alt="TITLE_FOR_sX3KeP7v7Kg" />
    <svg class="play-btn" height="100%" version="1.1" viewBox="0 0 68 48" width="100%"><path class="ytp-large-play-button-bg" d="M66.52,7.74c-0.78-2.93-2.49-5.41-5.42-6.19C55.79,.13,34,0,34,0S12.21,.13,6.9,1.55 C3.97,2.33,2.27,4.81,1.48,7.74C0.06,13.05,0,24,0,24s0.06,10.95,1.48,16.26c0.78,2.93,2.49,5.41,5.42,6.19 C12.21,47.87,34,48,34,48s21.79-0.13,27.1-1.55c2.93-0.78,4.64-3.26,5.42-6.19C67.94,34.95,68,24,68,24S67.94,13.05,66.52,7.74z" fill="#212121" fill-opacity="0.8"></path><path d="M 45,24 27,14 27,34" fill="#fff"></path></svg>
  </div>
  <iframe width="560" height="315" src="" data-src="https://www.youtube.com/embed/sX3KeP7v7Kg?autoplay=1&amp;playsinline=1" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen="" style="display: none; "></iframe>
</div>

<p>This parallels the first part of this tutorial, where we‚Äôll take a plain React app and add Redux to it one piece at a time.</p>

<p>Or, keep reading! The tutorial below covers everything in the video and then some.</p>

<h2 id="should-you-use-redux">Should You Use Redux?</h2>

<p>It‚Äôs especially valid, in 2020, to wonder‚Ä¶ should you still use Redux? Is there something better out now, with Hooks or Context or some other library?</p>

<p>The short answer: Even with plenty of alternatives, <a href="https://blog.isquaredsoftware.com/2018/03/redux-not-dead-yet/">Redux is not dead yet</a>. But whether or not it makes sense for your app‚Ä¶ well, it depends.</p>

<p>Super simple? Only a few bits of state in one or two places? Local component state will probably be great. You can do that with classes, <a href="https://daveceddia.com/intro-to-hooks/">Hooks</a>, or both.</p>

<p>A bit more complex, with a few ‚Äúglobal‚Äù things that need to be shared across the app? The <a href="https://daveceddia.com/context-api-vs-redux/">Context API</a> might be perfect for you.</p>

<p>Lots of global state, with interactions between disconnected parts of the app? Or a big app that will only get bigger over time? Give Redux a try.</p>

<p>You can always add Redux <em>later</em>, too. You don‚Äôt have to decide on Day 1. Start simple and add complexity when and where you need it.</p>

<h3 id="do-you-know-react-yet">Do You Know React Yet?</h3>

<p>React can be used on its own without Redux. Redux is an <em>add-on</em> to React.</p>

<p>Even if you intend on using them both, I super strongly recommend learning <em>only</em> React <em>without</em> Redux initially. Understand props, state, and one-way data flow, and learn to ‚Äúthink in React‚Äù before trying to learn Redux. Learning them both at the same time is a surefire recipe for confusion. I‚Äôve got an <a href="/react-tutorial/">in-depth React tutorial</a> that covers all the important stuff you need to know.</p>

<p>I also put it together into a 5-day free course! (it‚Äôs a pretty long tutorial, so it makes sense to spread it out)</p>

<div>
  <div class="dc_form_container inline-prec">
    <div class="dc_success_msg" style="display:none;">
      Success! Now check your email.
    </div>

    <!--  Form starts here  -->
    
    <form class="dc_signup_form" action="/s/signup" method="POST">
    
      <h4 class="dc_title">
</h4>
      <div class="dc_description">
        
<div>
  <p>Learn React by building a few simple apps over the next 5 days.</p>
</div>

      </div>

      <div class="dc_error_msg" style="display:none">
        There was an error submitting your subscription. Please try again.
      </div>

      <div class="dc_field">
        <label class="dc_label" for="dc_email" style="display: none">Email Address</label>
        <input type="email" name="email" placeholder="Your email address" required="" />
      </div>
      <input type="hidden" name="page_id" value="redux-tutorial" />
      <input type="hidden" name="form_id" value="redux-tutorial-inline-prec" />
      <input type="hidden" name="form_version" value="1" />
      <input type="hidden" name="tag" value="734384,823523" />
      <button class="dc_subscribe_button" type="submit">
        Get Lesson 1
      </button>
      <div class="dc_guarantee">
         
      </div>
    </form>

    
<form class="dc_gdpr_form" action="/s/signup/gdpr" method="POST" style="display:none;">

  <p>Before we go on, I have to ask...</p>
  <div class="dc_form_field">
    <label>
      <input type="checkbox" name="confirm_answer" value="true" />
      <span>consent</span>
    </label>
  </div>
  <br />

  <div class="dc_error_msg" style="display:none">
    There was an error submitting your subscription. Please try again.
  </div>

  <input type="hidden" name="email" value="FILL_IN_WITH_JS" />
  <input type="hidden" name="firstName" value="FILL_IN_WITH_JS" />
  <input type="hidden" name="gdpr" value="FILL_IN_WITH_JS" />
  <input type="hidden" name="captcha" value="FILL_IN_WITH_JS" />
  <input type="hidden" name="sign" value="FILL_IN_WITH_JS" />
  <input type="hidden" name="confirm" value="FILL_IN_WITH_JS" />
  <input type="hidden" name="tag" value="734384" />
  <input type="hidden" name="page_id" value="redux-tutorial" />
  <input type="hidden" name="form_id" value="redux-tutorial-inline-prec" />
  <input type="hidden" name="form_version" value="1" />
  <button type="submit" class="dc_subscribe_button">
    Finish
  </button>
</form>

  </div>

  <style type="text/css">
    .dc_form_container {
      border-top: 4px solid #3166de;
      border-bottom: 4px solid #3166de;
      padding: 1em;
      background: #f8faff;
      font-family: "Open Sans", sans-serif;
      margin-bottom: 2.5rem;
    }
    .dc_form_container .dc_title {
      margin-top: 0;
      text-align: center;
      font-weight: 400;
      font-size: 30px;
    }
    .dc_form_container .dc_description {
      margin-bottom: 10px;
    }
    .dc_signup_form, .dc_gdpr_form {
      margin-bottom: 0;
      position: relative;
    }
    .dc_signup_form input, .dc_gdpr_form input {
      width: 100%;
      padding: 20px 12px;
    }
    .dc_gdpr_form input[type="checkbox"] {
      width: initial;
      margin: 0;
      margin-right: 5px;
    }
    .dc_subscribe_button {
      margin: 0 auto;
      display: block;
      width: 100%;
      max-width: 250px;
      font-size: 18px;
      background: orange;
      color: #583900;
      border-color: #e29609;
      height: auto;
      margin-bottom: 5px;
    }
    .dc_subscribe_button[disabled] {
      opacity: 0.5;
    }
    .dc_subscribe_button[disabled]:hover {
      opacity: 0.5;
      color: #583900;
    }
    .dc_guarantee {
      font-size: 12px;
      text-align: center;
      opacity: 0.7;
    }
    .dc_success_msg {
      padding: 10px;
      background: #fff;
      border: 1px solid #8dc74a;
      border-radius: 2px;
      background: #F1F8E9;
      text-align: center;
    }
    .dc_error_msg {
      background: #FFEBEE;
      padding: 10px;
      margin-bottom: 5px;
      border: 2px solid #C62828;
    }
  </style>
</div>

<style>
img.dc_form_img {
  margin: 0 auto;
  margin-bottom: 10px;
}
.prec-bullet {
  margin-left: 15px;
}
.inline-prec.dc_form_container {
  border: none;
}
.inline-prec button {
  max-width: 320px;
}
</style>

<h2 id="the-benefits-of-redux">The Benefits of Redux</h2>

<p>If you‚Äôve used React for more than a few minutes, you probably know about props and one-way data flow. Data is passed <em>down</em> the component tree via props. Given a component like this:</p>

<p><img src="https://daveceddia.com/images/counter-component.png" srcset="https://daveceddia.com/images/counter-component@2x.png 2x" alt="Counter component" /></p>

<p>The <code class="highlighter-rouge">count</code>, stored in <code class="highlighter-rouge">App</code>‚Äôs state, would be passed down as a prop:</p>

<p><img src="https://daveceddia.com/images/passing-props-down.png" srcset="https://daveceddia.com/images/passing-props-down@2x.png 2x" alt="Passing props down" /></p>

<p>For data to come back <em>up</em> the tree, it needs to flow through a callback function, so that callback function must first be passed <em>down</em> to any components that want to call it to pass data up.</p>

<p><img src="https://daveceddia.com/images/passing-callbacks-down.png" srcset="https://daveceddia.com/images/passing-callbacks-down@2x.png 2x" alt="Passing callbacks down" /></p>

<p>You can think of the data like <em>electricity</em>, connected by colored wires to the components that care about it. Data flows down and up through these wires, but the wires can‚Äôt be run through thin air ‚Äì they have to be chained from one component to the next.</p>

<h3 id="passing-data-multiple-levels-is-a-pain">Passing Data Multiple Levels is a Pain</h3>

<p>Sooner or later you run into a situation where a top-level container has some data, and a child 4+ levels down needs that data. Here‚Äôs an example from Twitter, with all the avatars highlighted:</p>

<p><img src="https://daveceddia.com/images/twitter-user-data.png" srcset="https://daveceddia.com/images/twitter-user-data@2x.png 2x" alt="Twitter user data" /></p>

<p>Let‚Äôs pretend the top-level <code class="highlighter-rouge">App</code> component holds the <code class="highlighter-rouge">user</code> object in state. The <code class="highlighter-rouge">user</code> contains the current user‚Äôs avatar, handle, and other profile info.</p>

<p>In order to deliver the <code class="highlighter-rouge">user</code> data to all 3 <code class="highlighter-rouge">Avatar</code> components, the <code class="highlighter-rouge">user</code> needs to be woven through a bunch of intermediate components that don‚Äôt need the data.</p>

<p><img src="https://daveceddia.com/images/twitter-hierarchy.png" srcset="https://daveceddia.com/images/twitter-hierarchy@2x.png 2x" alt="Sending the user data down to the Avatar components" /></p>

<p>Getting the data down there is like threading a needle through a mining expedition. Wait that doesn‚Äôt make any sense. Anyway, <em>it‚Äôs a pain</em>. Also known as ‚Äúprop-drilling‚Äù.</p>

<p>More importantly, it‚Äôs not very good software design. Intermediate components are forced to accept and pass along props that they don‚Äôt care about. This means refactoring and reusing those components will be harder than it needs to be.</p>

<p>Wouldn‚Äôt it be nice if the components that didn‚Äôt need the data didn‚Äôt have to see it at all?</p>

<p>Redux is one way to solve this problem.</p>

<h3 id="passing-data-between-adjacent-components">Passing Data Between Adjacent Components</h3>

<p>If you have components that are siblings and need to share data, the way to do that in React is to pull that data <em>up</em> into a parent component and pass it down with props.</p>

<p>That can be cumbersome though. Redux can help by giving you one global ‚Äúparent‚Äù where you can store the data, and then you can <code class="highlighter-rouge">connect</code> the sibling components to the data with React-Redux.</p>

<h3 id="use-react-redux-to-connect-data-to-any-component">Use React-Redux to Connect Data to Any Component</h3>

<p>Using the <code class="highlighter-rouge">connect</code> function that comes with <code class="highlighter-rouge">react-redux</code>, you can plug any component into Redux‚Äôs store and pull out the data it needs.</p>

<p><img src="https://daveceddia.com/images/redux-connected-twitter.png" srcset="https://daveceddia.com/images/redux-connected-twitter@2x.png 2x" alt="Connecting Redux to the Avatar components" /></p>

<p>Redux does some other cool stuff too, like make debugging easier (Redux DevTools let you inspect every single state change), time-travel debugging (you can <em>roll back</em> state changes and see how your app looked in the past), and it can make your code more maintainable in the long run. It‚Äôll teach you more about functional programming too.</p>

<h2 id="built-in-redux-alternatives">Built-in Redux Alternatives</h2>

<p>If Redux seems like overkill for your situation, give these alternatives a look. They‚Äôre built right in to React.</p>

<h3 id="redux-alternative-the-react-context-api">Redux Alternative: The React Context API</h3>

<p>Under the hood, React-Redux uses React‚Äôs built-in Context API to pass data around. If you want to, you can cut out the middleman and use Context directly. You‚Äôll miss out on the nice features of Redux mentioned above, but if your app is simple and you want an easy way to pass data around, Context might be perfect.</p>

<p>Since you‚Äôre here, I‚Äôm gonna assume you want to learn Redux, and I won‚Äôt <a href="https://daveceddia.com/context-api-vs-redux/">compare Redux to the Context API</a> or the <a href="https://daveceddia.com/usecontext-hook/">useContext</a> and <a href="https://daveceddia.com/usereducer-hook-examples/">useReducer</a> Hooks right here. You can learn more at those links.</p>

<p>If you want a deep dive on the Context API, watch my course <a href="https://egghead.io/courses/react-context-for-state-management">React Context for State Management</a> at egghead.</p>

<h3 id="another-alternative-use-the-children-prop">Another Alternative: Use the <code class="highlighter-rouge">children</code> Prop</h3>

<p>Depending on how you structure your app, you might be able to pass data to child components more directly using a combination of the <code class="highlighter-rouge">children</code> prop and other props as ‚Äúslots‚Äù. You can effectively skip a few levels in the hierarchy if you arrange it right.</p>

<p>I have an article about this <a href="https://daveceddia.com/pluggable-slots-in-react-components/">‚Äúslots‚Äù pattern and how to arrange your component tree</a> to pass data more efficiently.</p>

<h2 id="learn-redux-starting-with-plain-react">Learn Redux, Starting With Plain React</h2>

<p>We‚Äôre going to take an incremental approach, starting with a plain React app with component state, adding parts of Redux piece-by-piece, and dealing with the errors along the way. Let‚Äôs call it ‚ÄúError-Driven Development‚Äù :)</p>

<p>Here is a counter:</p>

<p><img src="https://daveceddia.com/images/counter-plain.png" srcset="https://daveceddia.com/images/counter-plain@2x.png 2x" alt="Counter component" /></p>

<p>In this example, the Counter component holds the state, and the App surrounding it is a simple wrapper.</p>

<div class="code-filename">Counter.js</div>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="s1">'react'</span><span class="p">;</span>

<span class="kd">class</span> <span class="nx">Counter</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="nx">state</span> <span class="o">=</span> <span class="p">{</span> <span class="na">count</span><span class="p">:</span> <span class="mi">0</span> <span class="p">}</span>

  <span class="nx">increment</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
      <span class="na">count</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="p">});</span>
  <span class="p">}</span>

  <span class="nx">decrement</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span>
      <span class="na">count</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span> <span class="o">-</span> <span class="mi">1</span>
    <span class="p">});</span>
  <span class="p">}</span>

  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span>
      <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>Counter<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">decrement</span><span class="si">}</span><span class="p">&gt;</span>-<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">increment</span><span class="si">}</span><span class="p">&gt;</span>+<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Counter</span><span class="p">;</span>
</code></pre></div></div>

<p>As a quick review, here‚Äôs how this works:</p>

<ul>
  <li>The <code class="highlighter-rouge">count</code> state is stored in the <code class="highlighter-rouge">Counter</code> component</li>
  <li>When the user clicks ‚Äú+‚Äù, the button‚Äôs <code class="highlighter-rouge">onClick</code> handler is called, which calls the <code class="highlighter-rouge">increment</code> function.</li>
  <li>The <code class="highlighter-rouge">increment</code> function updates the state with the new count.</li>
  <li>Because state was changed, React re-renders the <code class="highlighter-rouge">Counter</code> component (and its children), and the new counter value is displayed.</li>
</ul>

<p>If you need more detail about how state changes work, go read <a href="https://daveceddia.com/visual-guide-to-state-in-react/">A Visual Guide to State in React</a> and then come back here.</p>

<p>But seriously: if the above was <em>not</em> review for you, you need to learn how React state works <em>before</em> you learn Redux, or it‚Äôll be mega-confusing. Take my <a href="https://daveceddia.com/pure-react-email-course">free 5-day React course</a>, gain confidence with plain React, then come back here.</p>

<h3 id="follow-along">Follow Along!</h3>

<p>The best way to actually learn this stuff is to try it! So here‚Äôs a CodeSandbox where you can follow along:</p>

<p>‚Äì&gt; <a href="https://codesandbox.io/s/98153xy79w">Open this CodeSandbox in a separate tab</a></p>

<p>I highly recommend you keep the CodeSandbox in sync with the tutorial and actually type out the examples as you go along.</p>

<h2 id="add-redux-to-the-react-app">Add Redux To The React App</h2>

<p>In CodeSandbox, expand the Dependencies section in the left pane, and click Add Dependency.</p>

<p>Search for <code class="highlighter-rouge">redux</code>, add it, then click Add Dependency again and search for <code class="highlighter-rouge">react-redux</code> and add it.</p>

<p><img src="https://daveceddia.com/images/add-redux-in-codesandbox.gif" alt="" /></p>

<p>In a local project, you can install them with Yarn or NPM: <code class="highlighter-rouge">npm install --save redux react-redux</code>.</p>

<h3 id="redux-vs-react-redux">redux vs react-redux</h3>

<p><code class="highlighter-rouge">redux</code> gives you a store, and lets you keep state in it, and get state out, and respond when the state changes. But that‚Äôs all it does.</p>

<p>It‚Äôs actually <code class="highlighter-rouge">react-redux</code> that lets you connect pieces of the state to React components.</p>

<p>That‚Äôs right: <code class="highlighter-rouge">redux</code> knows nothing about React <em>at all</em>.</p>

<p>These libraries are like two peas in a pod, though. 99.999% of the time, when anyone mentions ‚ÄúRedux‚Äù in the context of React, they are referring to both of these libraries in tandem. So keep that in mind when you see Redux mentioned on StackOverflow, or Reddit, or elsewhere.</p>

<p>The <code class="highlighter-rouge">redux</code> library can be used outside of a React app too. It‚Äôll work with Vue, Angular, and even backend Node/Express apps.</p>

<h2 id="redux-has-one-global-store">Redux Has One Global Store</h2>

<p>We‚Äôre going to start by looking at just Redux by itself, and just one piece of it: the <strong>store</strong>.</p>

<p>We‚Äôve talked about how Redux keeps the <strong>state</strong> of your app in a single <strong>store</strong>. And how you can extract parts of that state and plug it into your components as props.</p>

<p>You‚Äôll often see the words ‚Äústate‚Äù and ‚Äústore‚Äù used interchangeably. Technically, the <strong>state</strong> is the data, and the <strong>store</strong> is where it‚Äôs kept.</p>

<p>So: as step 1 of our refactoring from plain React to Redux, we need to create a store to hold the state.</p>

<h2 id="create-the-redux-store">Create the Redux Store</h2>

<p>Redux comes with a handy function that creates stores, and it‚Äôs called <code class="highlighter-rouge">createStore</code>. Logical enough, eh?</p>

<p>In <code class="highlighter-rouge">index.js</code>, let‚Äôs make a store. Import <code class="highlighter-rouge">createStore</code> and call it like so:</p>

<div class="code-filename">index.js</div>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">createStore</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'redux'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="nx">createStore</span><span class="p">();</span>

<span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
  <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nc">Counter</span><span class="p">/&gt;</span>
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>This should fail with the error ‚ÄúExpected the reducer to be a function.‚Äù</p>

<p><img src="https://daveceddia.com/images/error-expected-reducer-to-be-a-function.png" srcset="https://daveceddia.com/images/error-expected-reducer-to-be-a-function.png 2x" alt="Error: Expected the reducer to be a function." /></p>

<h3 id="the-store-needs-a-reducer">The Store Needs a Reducer</h3>

<p>So, here‚Äôs the thing about Redux: it‚Äôs not very smart.</p>

<p>You might expect that by creating a store, it would give your state a nice default value. Maybe an empty object, perhaps?</p>

<p>But no. No convention-over-configuration here.</p>

<p>Redux makes <em>zero</em> assumptions about the shape of your state. It could be an object, or a number, or a string, or whatever you need. It‚Äôs up to you!</p>

<p>We have to provide a function that will return the state. That function is called a <strong>reducer</strong> (we‚Äôll see why in a minute). So let‚Äôs make a really simple one, pass it into <code class="highlighter-rouge">createStore</code>, and see what happens:</p>

<div class="code-filename">index.js</div>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">reducer</span><span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'reducer'</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">state</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="nx">createStore</span><span class="p">(</span><span class="nx">reducer</span><span class="p">);</span>
</code></pre></div></div>

<p>After you make this change, open up the console (in CodeSandbox, click the Console button at the bottom).</p>

<p>You should see a message logged there, something like this:</p>

<p><img src="https://daveceddia.com/images/reducer-console-log.png" srcset="https://daveceddia.com/images/reducer-console-log.png 2x" alt="reducer undefined Object { type: @@redux/INIT }" /></p>

<p>(the letters and numbers after INIT are randomized by Redux)</p>

<p>Notice how Redux called your reducer at the time you created the store. (To prove it: put a <code class="highlighter-rouge">console.log</code> immediately after the call to <code class="highlighter-rouge">createStore</code> and notice how it prints out after the reducer)</p>

<p>Also notice how Redux passed a <code class="highlighter-rouge">state</code> of <code class="highlighter-rouge">undefined</code>, and the action was an object with a <code class="highlighter-rouge">type</code> property.</p>

<p>We‚Äôll talk more about actions in a minute. For now, let‚Äôs go over the <em>reducer</em>.</p>

<h2 id="what-is-a-redux-reducer">What Is a Redux Reducer?</h2>

<p>The term ‚Äúreducer‚Äù might seem a bit scary and foreign, but after this section I think you‚Äôll come to agree that it is, as the saying goes, ‚Äújust a function.‚Äù</p>

<p>Have you ever used the <code class="highlighter-rouge">reduce</code> function on an array?</p>

<p>Here‚Äôs how it works: You pass it a function, and it calls your function once for each element of the array, similar to how <code class="highlighter-rouge">map</code> works ‚Äì you‚Äôre probably familiar with <code class="highlighter-rouge">map</code> from rendering lists of things in React.</p>

<p>Your function gets called with 2 arguments: the last iteration‚Äôs result, and the current array element. It combines the current item with the previous ‚Äútotal‚Äù result and returns the new total.</p>

<p>This will make more sense with an example:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">letters</span> <span class="o">=</span> <span class="p">[</span><span class="s1">'r'</span><span class="p">,</span> <span class="s1">'e'</span><span class="p">,</span> <span class="s1">'d'</span><span class="p">,</span> <span class="s1">'u'</span><span class="p">,</span> <span class="s1">'x'</span><span class="p">];</span>

<span class="c1">// `reduce` takes 2 arguments:</span>
<span class="c1">//   - a function to do the reducing (you might say, a "reducer")</span>
<span class="c1">//   - an initial value for accumulatedResult</span>
<span class="kd">var</span> <span class="nx">word</span> <span class="o">=</span> <span class="nx">letters</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span>
  <span class="kd">function</span><span class="p">(</span><span class="nx">accumulatedResult</span><span class="p">,</span> <span class="nx">arrayItem</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">accumulatedResult</span> <span class="o">+</span> <span class="nx">arrayItem</span><span class="p">;</span>
  <span class="p">},</span>
<span class="s1">''</span><span class="p">);</span> <span class="c1">// &lt;-- notice this empty string argument: it's the initial value</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">word</span><span class="p">)</span> <span class="c1">// =&gt; "redux"</span>
</code></pre></div></div>

<p>The function you pass in to <code class="highlighter-rouge">reduce</code> could rightfully be called a ‚Äúreducer‚Äù‚Ä¶ because it <em>reduces</em> a whole array of items down to a single result.</p>

<p>Redux is <em>basically</em> a fancy version of Array‚Äôs <code class="highlighter-rouge">reduce</code>. Earlier, you saw how Redux reducers have this signature:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">newState</span>
</code></pre></div></div>

<p>Meaning: it takes the current <code class="highlighter-rouge">state</code>, and an <code class="highlighter-rouge">action</code>, and returns the <code class="highlighter-rouge">newState</code>. Looks a lot like the signature of an <code class="highlighter-rouge">Array.reduce</code> reducer!</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nx">accumulatedValue</span><span class="p">,</span> <span class="nx">nextItem</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">nextAccumulatedValue</span>
</code></pre></div></div>

<p>Redux reducers work just like the function you pass to Array.reduce! :) The thing they reduce is actions. They <strong>reduce a set of actions (over time) into a single state</strong>. The difference is that with Array‚Äôs reduce it happens all at once, and with Redux, it happens over the lifetime of your running app.</p>

<p>If you‚Äôre still super unsure, check out my guide to <a href="https://daveceddia.com/what-is-a-reducer/">how Redux reducers work</a>. Otherwise, let‚Äôs forge ahead.</p>

<h2 id="give-the-reducer-an-initial-state">Give the Reducer an Initial State</h2>

<p>Remember that the reducer‚Äôs job is to take the current <code class="highlighter-rouge">state</code> and an <code class="highlighter-rouge">action</code> and return the new state.</p>

<p>It has another job, too: It should return the <strong>initial state</strong> the first time it‚Äôs called. This is sort of like ‚Äúbootstrapping‚Äù your app. It‚Äôs gotta start somewhere, right?</p>

<p>The idiomatic way to do that is to define an <code class="highlighter-rouge">initialState</code> variable and use the ES6 default argument syntax to assign it to <code class="highlighter-rouge">state</code>.</p>

<p>Since we‚Äôre gonna be moving our <code class="highlighter-rouge">Counter</code> state into Redux, let‚Äôs set up its initial state right now. Inside the <code class="highlighter-rouge">Counter</code> component our state is represented as an object with a <code class="highlighter-rouge">count</code>, so we‚Äôll mirror that same shape here.</p>

<div class="code-filename">index.js</div>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">initialState</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">count</span><span class="p">:</span> <span class="mi">0</span>
<span class="p">};</span>

<span class="kd">function</span> <span class="nx">reducer</span><span class="p">(</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">initialState</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'reducer'</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">state</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>If you look at the console again, you‚Äôll see it printed <code class="highlighter-rouge">{count: 0}</code> as the value for <code class="highlighter-rouge">state</code>. That‚Äôs what we want.</p>

<p>So that brings us to an important rule about reducers.</p>

<p><strong>Important Rule of Reducers #1</strong>: Never return undefined from a reducer.</p>

<p>You always want your state to be defined. A defined state is a happy state. An <em>un</em>defined state is <em>un</em>happy (and will likely break your app).</p>

<h2 id="dispatch-actions-to-change-the-state">Dispatch Actions to Change the State</h2>

<p>Yep, two new terms at once: we‚Äôre gonna ‚Äúdispatch‚Äù some ‚Äúactions.‚Äù</p>

<h3 id="what-is-a-redux-action">What is a Redux Action?</h3>

<p>An <strong>action</strong> is Redux-speak for a plain object with a property called <code class="highlighter-rouge">type</code>. That‚Äôs pretty much it. Following those 2 rules, this is an action:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="nl">type</span><span class="p">:</span> <span class="s2">"add an item"</span><span class="p">,</span>
  <span class="nx">item</span><span class="p">:</span> <span class="s2">"Apple"</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This is also an action:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="nl">type</span><span class="p">:</span> <span class="mi">7008</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Here‚Äôs another one:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="nl">type</span><span class="p">:</span> <span class="s2">"INCREMENT"</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Actions are very free-form things. As long as it‚Äôs an object with a <code class="highlighter-rouge">type</code> it‚Äôs fair game.</p>

<p>In order to keep things sane and maintainable, we Redux users usually give our actions types that are <strong>plain strings</strong>, and often uppercased, to signify that they‚Äôre meant to be constant values.</p>

<p>An action object describes a change you want to make (like ‚Äúplease increment the counter‚Äù) or an event that happenend (like ‚Äúthe request to the server failed with this error‚Äù).</p>

<p>Actions, despite their active-sounding name, are boring, inert objects. They don‚Äôt really <em>do</em> anything. Not on their own, anyway.</p>

<p>In order to make an action DO something, you need to <strong>dispatch</strong> it.</p>

<h2 id="how-redux-dispatch-works">How Redux Dispatch Works</h2>

<p>The store we created earlier has a built-in function called <code class="highlighter-rouge">dispatch</code>. Call it with an action, and Redux will call your reducer with that action (and then replace the state with whatever your reducer returned).</p>

<p>Let‚Äôs try it out with our store.</p>

<div class="code-filename">index.js</div>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="nx">createStore</span><span class="p">(</span><span class="nx">reducer</span><span class="p">);</span>
<span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">({</span> <span class="na">type</span><span class="p">:</span> <span class="s2">"INCREMENT"</span> <span class="p">});</span>
<span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">({</span> <span class="na">type</span><span class="p">:</span> <span class="s2">"INCREMENT"</span> <span class="p">});</span>
<span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">({</span> <span class="na">type</span><span class="p">:</span> <span class="s2">"DECREMENT"</span> <span class="p">});</span>
<span class="nx">store</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">({</span> <span class="na">type</span><span class="p">:</span> <span class="s2">"RESET"</span> <span class="p">});</span>
</code></pre></div></div>

<p>Add those dispatch calls to your CodeSandbox and check the console.</p>

<p><img src="https://daveceddia.com/images/dispatching-redux-actions.png" srcset="https://daveceddia.com/images/dispatching-redux-actions.png 2x" alt="reducer undefined Object { type: @@redux/INIT }" /></p>

<p>Every call to <code class="highlighter-rouge">dispatch</code> results in a call to your reducer!</p>

<p>Also notice how the state is the same every time? <code class="highlighter-rouge">{count: 0}</code> never changes.</p>

<p>That‚Äôs because our reducer is not <em>acting on</em> those actions. That‚Äôs an easy fix though. Let‚Äôs do that now.</p>

<h2 id="handle-actions-in-the-redux-reducer">Handle Actions in the Redux Reducer</h2>

<p>To make actions actually do something, we need to write some code in the reducer that will inspect the <code class="highlighter-rouge">type</code> of each action and update the state accordingly.</p>

<p>There are a few ways to do this.</p>

<p>You could make a fancy object where you look up a handler function by the action‚Äôs type‚Ä¶</p>

<p>Or you could write a bunch of if/else statements‚Ä¶</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span><span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="s2">"INCREMENT"</span><span class="p">)</span> <span class="p">{</span>
  <span class="p">...</span>
<span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="s2">"RESET"</span><span class="p">)</span> <span class="p">{</span>
  <span class="p">...</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Or you could use a simple <code class="highlighter-rouge">switch</code> statement, which is what I‚Äôll show below because it‚Äôs straightforward, and a very common way to do it.</p>

<p>Some people hate the <code class="highlighter-rouge">switch</code> though. If that‚Äôs you ‚Äì please feel free to write your reducers however you want :)</p>

<p>Here‚Äôs how we‚Äôll handle the actions:</p>

<div class="code-filename">index.js</div>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">reducer</span><span class="p">(</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">initialState</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'reducer'</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">);</span>

  <span class="k">switch</span><span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="s1">'INCREMENT'</span><span class="p">:</span>
      <span class="k">return</span> <span class="p">{</span>
        <span class="na">count</span><span class="p">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span>
      <span class="p">};</span>
    <span class="k">case</span> <span class="s1">'DECREMENT'</span><span class="p">:</span>
      <span class="k">return</span> <span class="p">{</span>
        <span class="na">count</span><span class="p">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">count</span> <span class="o">-</span> <span class="mi">1</span>
      <span class="p">};</span>
    <span class="k">case</span> <span class="s1">'RESET'</span><span class="p">:</span>
      <span class="k">return</span> <span class="p">{</span>
        <span class="na">count</span><span class="p">:</span> <span class="mi">0</span>
      <span class="p">};</span>
    <span class="nl">default</span><span class="p">:</span>
      <span class="k">return</span> <span class="nx">state</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Try this out and take a look at the console.</p>

<p><img src="https://daveceddia.com/images/handling-redux-actions.png" srcset="https://daveceddia.com/images/handling-redux-actions.png 2x" alt="reducer undefined Object { type: @@redux/INIT }" /></p>

<p>Hey look at that! The <code class="highlighter-rouge">count</code> is changing!</p>

<p>We‚Äôre about ready to hook this up to React, but let‚Äôs talk about this reducer code for a second.</p>

<h2 id="how-to-keep-your-reducers-pure">How to Keep Your Reducers Pure</h2>

<p>Another rule about reducers is that they must be <strong>pure functions</strong>. This means that they can‚Äôt modify their arguments, and they can‚Äôt have side effects.</p>

<p><strong>Reducer Rule #2</strong>: Reducers must be pure functions.</p>

<p>A ‚Äúside effect‚Äù is any change to something outside the scope of the function. Don‚Äôt change variables outside the scope of the function, don‚Äôt call other functions that change things (like <code class="highlighter-rouge">fetch</code>, which affects the network and other systems), don‚Äôt dispatch actions, and so on.</p>

<p>Technically <code class="highlighter-rouge">console.log</code> is a side effect, but we‚Äôll allow that one.</p>

<p>The most important thing is this: <strong>don‚Äôt modify the <code class="highlighter-rouge">state</code> argument</strong>.</p>

<p>This means you can‚Äôt do <code class="highlighter-rouge">state.count = 0</code> or <code class="highlighter-rouge">state.items.push(newItem)</code> or <code class="highlighter-rouge">state.count++</code>, or any other kind of mutation ‚Äì not to <code class="highlighter-rouge">state</code> itself, and not to any of the sub-properties of <code class="highlighter-rouge">state</code>.</p>

<p>Think of it like a game where the only thing you can do is <code class="highlighter-rouge">return { ... }</code>. It‚Äôs a fun game. Maddening at first. But you‚Äôll get better at it with practice.</p>

<p>I put together a full guide to <a href="https://daveceddia.com/react-redux-immutability-guide/">How to do Immutable Updates in Redux</a>, showing 7 common patterns for updating state within objects and arrays.</p>

<p>Another great option is to install the <a href="https://github.com/mweststrate/immer">Immer</a> library and use it in your reducers. Immer lets you write regular mutable-looking code and produces immutable updates automagically. <a href="https://daveceddia.com/react-redux-immutability-guide/#easy-state-updates-with-immer">Learn how to use Immer here</a>.</p>

<p>My advice: if you‚Äôre starting a brand new app, use Immer from the beginning. It‚Äôll save you a lot of hassle. But I‚Äôm showing you the ‚Äúhard‚Äù way because that‚Äôs how a lot of code still does it, and you‚Äôre bound to see reducers written without Immer.</p>

<h2 id="all-these-rules">All These Rules‚Ä¶</h2>

<p>Always return a state, never change state, don‚Äôt connect every component, eat your broccoli, don‚Äôt stay out past 11‚Ä¶ it‚Äôs exhausting. It‚Äôs like a rules factory, and I don‚Äôt even know what that is.</p>

<p>Yeah, Redux can be like an overbearing parent. But it comes from a place of love. Functional programming love.</p>

<p>Redux is built on the idea of immutability, because mutating global state is the road to ruin.</p>

<p>Have you ever tried keeping your state in a global object? It works great at first. Nice and easy. Everything can access the state because it‚Äôs always available, and making changes is simple.</p>

<p>And then the state starts changing in unpredictable ways and it becomes impossible to find the code that‚Äôs changing it.</p>

<p>Redux avoids these problems with some simple rules.</p>

<ul>
  <li>State is read-only, and actions are the only way to modify it.</li>
  <li>Changes happen one way, and one way only: dispatch(action) -&gt; reducer -&gt; new state.</li>
  <li>The reducer function must be ‚Äúpure‚Äù ‚Äì it cannot modify its arguments, and it can‚Äôt have side effects.</li>
</ul>

<h2 id="how-to-use-redux-with-react">How to Use Redux with React</h2>

<p>At this point we have a lovely little <code class="highlighter-rouge">store</code> with a <code class="highlighter-rouge">reducer</code> that knows how to update the <code class="highlighter-rouge">state</code> when it receives an <code class="highlighter-rouge">action</code>.</p>

<p>Now it‚Äôs time to hook up Redux to React.</p>

<p>To do that, the <code class="highlighter-rouge">react-redux</code> library comes with 2 things: a component called <code class="highlighter-rouge">Provider</code>, and a function called <code class="highlighter-rouge">connect</code>.</p>

<p>By wrapping the entire app with the <code class="highlighter-rouge">Provider</code> component, <em>every component</em> in the app tree will be able to access the Redux store if it wants to.</p>

<p>In <code class="highlighter-rouge">index.js</code>, import the <code class="highlighter-rouge">Provider</code> and wrap the contents of <code class="highlighter-rouge">App</code> with it. Pass the <code class="highlighter-rouge">store</code> as a prop.</p>

<div class="code-filename">index.js</div>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Provider</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'react-redux'</span><span class="p">;</span>

<span class="p">...</span>

<span class="kd">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
  <span class="p">&lt;</span><span class="nc">Provider</span> <span class="na">store=</span><span class="si">{</span><span class="nx">store</span><span class="si">}</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nc">Counter</span><span class="p">/&gt;</span>
  <span class="p">&lt;/</span><span class="nc">Provider</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div>

<p>After this, <code class="highlighter-rouge">Counter</code>, and children of <code class="highlighter-rouge">Counter</code>, and children of their children, and so on ‚Äì all of them can now access the Redux store.</p>

<p>But not automatically. We‚Äôll need to use the <code class="highlighter-rouge">connect</code> function on our components to access the store.</p>

<h3 id="how-the-react-redux-provider-works">How the React-Redux Provider Works</h3>

<p>This <code class="highlighter-rouge">Provider</code> thing might seem like total magic. It is a little bit; it actually uses React‚Äôs <a href="https://daveceddia.com/context-api-vs-redux/">Context feature</a> under the hood.</p>

<p>Context is like a secret passageway connected to every component, and using <code class="highlighter-rouge">connect</code> opens the door to the passageway.</p>

<p>Imagine pouring syrup on a pile of pancakes, and how it manages to make its way into ALL the pancakes even though you only poured it on the top one. <code class="highlighter-rouge">Provider</code> does that for Redux.</p>

<h2 id="prepare-the-counter-component-for-redux">Prepare the Counter Component for Redux</h2>

<p>Right now the Counter has local state. We‚Äôre going to rip that out, in preparation to get the <code class="highlighter-rouge">count</code> as a prop from Redux.</p>

<p>Remove the state initialzation at the top and the <code class="highlighter-rouge">setState</code> calls inside <code class="highlighter-rouge">increment</code> and <code class="highlighter-rouge">decrement</code>. Then, replace <code class="highlighter-rouge">this.state.count</code> with <code class="highlighter-rouge">this.props.count</code>.</p>

<div class="code-filename">Counter.js</div>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Counter</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="c1">// state = { count: 0 }; // remove this</span>

  <span class="nx">increment</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="cm">/*
    // Remove this
    this.setState({
      count: this.state.count + 1
    });
    */</span>
  <span class="p">};</span>

  <span class="nx">decrement</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="cm">/*
    // Also remove this
    this.setState({
      count: this.state.count - 1
    });
    */</span>
  <span class="p">};</span>

  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span>
      <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className=</span><span class="s2">"counter"</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>Counter<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">decrement</span><span class="si">}</span><span class="p">&gt;</span>-<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="nt">span</span> <span class="na">className=</span><span class="s2">"count"</span><span class="p">&gt;</span><span class="si">{</span>
            <span class="c1">// Replace state:</span>
            <span class="c1">//// this.state.count</span>
            <span class="c1">// With props:</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">count</span>
          <span class="si">}</span><span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick=</span><span class="si">{</span><span class="k">this</span><span class="p">.</span><span class="nx">increment</span><span class="si">}</span><span class="p">&gt;</span>+<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This will leave <code class="highlighter-rouge">increment</code> and <code class="highlighter-rouge">decrement</code> empty. We‚Äôll fill them in again soon.</p>

<p>You‚Äôll also notice the count has disappeared ‚Äì which it should, because nothing is passing a <code class="highlighter-rouge">count</code> prop to <code class="highlighter-rouge">Counter</code> yet.</p>

<h2 id="connect-the-component-to-redux">Connect the Component to Redux</h2>

<p>To get the <code class="highlighter-rouge">count</code> out of Redux, we first need to import the <code class="highlighter-rouge">connect</code> function at the top of Counter.js:</p>

<div class="code-filename">Counter.js</div>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">connect</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'react-redux'</span><span class="p">;</span>
</code></pre></div></div>

<p>Then we need to ‚Äúconnect‚Äù the Counter component to Redux at the bottom:</p>

<div class="code-filename">Counter.js</div>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Add this function:</span>
<span class="kd">function</span> <span class="nx">mapStateToProps</span><span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">count</span><span class="p">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">count</span>
  <span class="p">};</span>
<span class="p">}</span>

<span class="c1">// Then replace this:</span>
<span class="c1">// export default Counter;</span>

<span class="c1">// With this:</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">connect</span><span class="p">(</span><span class="nx">mapStateToProps</span><span class="p">)(</span><span class="nx">Counter</span><span class="p">);</span>
</code></pre></div></div>

<p>Previously we were exporting the component itself. Now we‚Äôre wrapping it with this <code class="highlighter-rouge">connect</code> function call, so we‚Äôre exporting the <em>connected</em> Counter. As far as the rest of your app is concerned, this looks like a regular component.</p>

<p>And the count should reappear! Except it‚Äôs frozen until we reimplement increment/decrement.</p>

<h2 id="how-to-use-react-redux-connect">How to Use React Redux <code class="highlighter-rouge">connect</code></h2>

<p>You might notice the call looks little‚Ä¶ weird. Why <code class="highlighter-rouge">connect(mapStateToProps)(Counter)</code> and not <code class="highlighter-rouge">connect(mapStateToProps, Counter)</code> or <code class="highlighter-rouge">connect(Counter, mapStateToProps)</code>? What‚Äôs that doing?</p>

<p>It‚Äôs written this way because <code class="highlighter-rouge">connect</code> is a <em>higher-order function</em>, which is a fancy way of saying it returns a function when you call it. And then calling <em>that</em> function with a component returns a new (wrapped) component.</p>

<p>Another name for this is a <a href="https://daveceddia.com/extract-state-with-higher-order-components/"><em>higher-order component</em></a> (aka ‚ÄúHOC‚Äù). HOCs have gotten some bad press in the past, but it‚Äôs still quite a useful pattern, and <code class="highlighter-rouge">connect</code> is a good example of a useful one.</p>

<p>What <code class="highlighter-rouge">connect</code> does is hook into Redux, pull out the entire state, and pass it through the <code class="highlighter-rouge">mapStateToProps</code> function that you provide. This needs to be a custom function because only <em>you</em> know the ‚Äúshape‚Äù of the state you‚Äôve stored in Redux.</p>

<h2 id="how-mapstatetoprops-works">How mapStateToProps Works</h2>

<p><code class="highlighter-rouge">connect</code> passes the entire state to your <code class="highlighter-rouge">mapStateToProps</code> function as if to say, ‚ÄúHey, tell me what you need out of this jumbled mess.‚Äù</p>

<p>The object you return from <code class="highlighter-rouge">mapStateToProps</code> gets fed into your component as props. The example above will pass <code class="highlighter-rouge">state.count</code> as the value of the <code class="highlighter-rouge">count</code> prop: the keys in the object become prop names, and their corresponding values become the props‚Äô values. So you see, this function literally <em>defines a mapping from state into props</em>.</p>

<p>By the way ‚Äì the name <code class="highlighter-rouge">mapStateToProps</code> is conventional, but it‚Äôs not special in any way. You can shorten it to <code class="highlighter-rouge">mapState</code> or call it whatever you want. As long as it takes the <code class="highlighter-rouge">state</code> object and returns an object full of props, you‚Äôre good.</p>

<h3 id="why-not-pass-the-whole-state">Why not pass the whole state?</h3>

<p>In the example above, our state is <em>already</em> in the right shape‚Ä¶ and it seems like maybe <code class="highlighter-rouge">mapDispatchToProps</code> is unnecessary. If it essentially copies the argument (state) into an object that is identical to the state, what good is it?</p>

<p>In really small examples that might be all it does, but usually you‚Äôll be picking out pieces of data the component needs from a larger collection of state.</p>

<p>And also, without the <code class="highlighter-rouge">mapStateToProps</code> function, <code class="highlighter-rouge">connect</code> won‚Äôt pass in any state data at all.</p>

<p>You <em>could</em> pass in all of the state, and let the component sort it out. That‚Äôs not a great habit to get into though, because the component will need to know the shape of the Redux state to pick out what it needs, and it‚Äôll be harder to change that shape later, if you need.</p>

<h2 id="dispatch-redux-actions-from-a-react-component">Dispatch Redux Actions from a React Component</h2>

<p>Now that our Counter is <code class="highlighter-rouge">connect</code>ed, we‚Äôve got the <code class="highlighter-rouge">count</code> value. Now how can we dispatch actions to change the count?</p>

<p>Well, <code class="highlighter-rouge">connect</code> has your back: in addition to passing in the (mapped) state, it <em>also</em> passes in the <code class="highlighter-rouge">dispatch</code> function from the store!</p>

<p>To dispatch an action from inside the Counter, we can call <code class="highlighter-rouge">this.props.dispatch</code> with an action.</p>

<p>Our reducer is already set up to handle the <code class="highlighter-rouge">INCREMENT</code> and <code class="highlighter-rouge">DECREMENT</code> actions, so let‚Äôs dispatch those from increment/decrement:</p>

<div class="code-filename">Counter.js</div>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">increment</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">({</span> <span class="na">type</span><span class="p">:</span> <span class="s2">"INCREMENT"</span> <span class="p">});</span>
<span class="p">};</span>

<span class="nx">decrement</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">({</span> <span class="na">type</span><span class="p">:</span> <span class="s2">"DECREMENT"</span> <span class="p">});</span>
<span class="p">};</span>
</code></pre></div></div>

<p>And now we‚Äôre done. The buttons should work again.</p>

<h3 id="try-this-add-a-reset-button">Try this! Add a Reset Button</h3>

<p>Here‚Äôs a little exercise to try: add a ‚ÄúReset‚Äù button to the counter that dispatches the ‚ÄúRESET‚Äù action when clicked.</p>

<p>The reducer is already set up to handle this action, so you should only need to modify Counter.js.</p>

<h2 id="action-constants">Action Constants</h2>

<p>In most Redux apps, you‚Äôll see <strong>action constants</strong> used in place of plain strings. It‚Äôs an extra level of abstraction that can save you some time in the long run.</p>

<p>Action constants help avoid typos, and typos in action names can be a huge pain: no errors, no visible sign that anything is broken, and your actions don‚Äôt appear to be doing anything? Could be a typo.</p>

<p>Action constants are easy to write: store your action strings in variables.</p>

<p>A good place to put these is in an <code class="highlighter-rouge">actions.js</code> file (when your app is small, anyway).</p>

<div class="code-filename">actions.js</div>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">INCREMENT</span> <span class="o">=</span> <span class="s2">"INCREMENT"</span><span class="p">;</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">DECREMENT</span> <span class="o">=</span> <span class="s2">"DECREMENT"</span><span class="p">;</span>
</code></pre></div></div>

<p>Then you can import the action names, and use those instead of writing the strings:</p>

<div class="code-filename">Counter.js</div>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="s2">"react"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">INCREMENT</span><span class="p">,</span> <span class="nx">DECREMENT</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'./actions'</span><span class="p">;</span>

<span class="kd">class</span> <span class="nx">Counter</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="nx">state</span> <span class="o">=</span> <span class="p">{</span> <span class="na">count</span><span class="p">:</span> <span class="mi">0</span> <span class="p">};</span>

  <span class="nx">increment</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">({</span> <span class="na">type</span><span class="p">:</span> <span class="nx">INCREMENT</span> <span class="p">});</span>
  <span class="p">};</span>

  <span class="nx">decrement</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">({</span> <span class="na">type</span><span class="p">:</span> <span class="nx">DECREMENT</span> <span class="p">});</span>
  <span class="p">};</span>

  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="p">...</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="what-is-a-redux-action-creator">What is a Redux Action Creator?</h2>

<p>Up til now we‚Äôve been writing out action objects manually. Like heathens.</p>

<p>What if you had a <em>function</em> that would write them for you? No more mis-written actions!</p>

<p>I can tell you think this is crazy. How hard is it to write <code class="highlighter-rouge">{ type: INCREMENT }</code> without messing up?</p>

<p>As your app grows larger, and you have more than 2 actions, and those actions start to get more complex ‚Äì passing around more data than just a <code class="highlighter-rouge">type</code> ‚Äì action creators can be helpful to have.</p>

<p>Like action constants, they‚Äôre not a <em>requirement</em> though. This is another layer of abstraction and if you don‚Äôt want to bother with it in your app, that‚Äôs fine.</p>

<p>I‚Äôll explain what they are anyway, though. You can decide if you want to use them sometimes/always/never.</p>

<p>An <strong>action creator</strong> in Redux terms is a fancy term for function that returns an action object. That‚Äôs all it is :)</p>

<p>Here are two of them, returning familiar actions. These go nicely in <code class="highlighter-rouge">actions.js</code> alongside the action constants, by the way.</p>

<div class="code-filename">actions.js</div>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">INCREMENT</span> <span class="o">=</span> <span class="s2">"INCREMENT"</span><span class="p">;</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">DECREMENT</span> <span class="o">=</span> <span class="s2">"DECREMENT"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">function</span> <span class="nx">increment</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="nx">INCREMENT</span> <span class="p">};</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">decrement</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">({</span> <span class="na">type</span><span class="p">:</span> <span class="nx">DECREMENT</span> <span class="p">});</span>
</code></pre></div></div>

<p>I wrote them two different ways ‚Äì as a <code class="highlighter-rouge">function</code> and as an arrow ‚Äì to show that it doesn‚Äôt matter how you write them. Pick your fave and go with it.</p>

<p>You‚Äôll notice that the function names are camelCase (well, they would be ifTheyWereLonger) while the action constants are <code class="highlighter-rouge">UPPER_CASE_WITH_UNDERSCORES</code>. That, too, is just a convention. Helps you know if you‚Äôre looking at an action creator function or an action constant. But feel free to name yours how you like. Redux doesn‚Äôt care.</p>

<p>Now‚Ä¶ what do you do with an action creator? Import it and dispatch it, of course!</p>

<div class="code-filename">Counter.js</div>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="s2">"react"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">increment</span><span class="p">,</span> <span class="nx">decrement</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'./actions'</span><span class="p">;</span>

<span class="kd">class</span> <span class="nx">Counter</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="nx">state</span> <span class="o">=</span> <span class="p">{</span> <span class="na">count</span><span class="p">:</span> <span class="mi">0</span> <span class="p">};</span>

  <span class="nx">increment</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="nx">increment</span><span class="p">());</span> <span class="c1">// &lt;&lt; use it here</span>
  <span class="p">};</span>

  <span class="nx">decrement</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="nx">decrement</span><span class="p">());</span>
  <span class="p">};</span>

  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="p">...</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The key thing is to remember to <strong>call the action creator()</strong>!</p>

<p>Don‚Äôt <code class="highlighter-rouge">dispatch(increment)</code> üö´</p>

<p>Do <code class="highlighter-rouge">dispatch(increment())</code> ‚úÖ</p>

<p>Remember that an action creator is a plain old function. Dispatch wants an action <em>object</em>, not a function.</p>

<p>Also: you will almost definitely mess this up and be very confused. At least once, probably many times. That‚Äôs normal. I <em>still</em> forget sometimes.</p>

<h2 id="how-to-use-react-redux-mapdispatchtoprops">How to Use React Redux mapDispatchToProps</h2>

<p>Now that you know what an action creator is, we can talk about <em>one more</em> level of abstraction. (I know. I KNOW. It‚Äôs optional though.)</p>

<p>You know how <code class="highlighter-rouge">connect</code> passes in a <code class="highlighter-rouge">dispatch</code> function? And you know how you get really tired of typing <code class="highlighter-rouge">this.props.dispatch</code> all the time and it bothers you how messy that looks? (go with me here)</p>

<p>By writing a <code class="highlighter-rouge">mapDispatchToProps</code> object (or function! but usually object) and passing it to <code class="highlighter-rouge">connect</code> when you wrap your component, you‚Äôll receive those action creators as <em>callable props</em>. Here‚Äôs what I mean:</p>

<div class="code-filename">Counter.js</div>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="s1">'react'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">connect</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'react-redux'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">increment</span><span class="p">,</span> <span class="nx">decrement</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'./actions'</span><span class="p">;</span>

<span class="kd">class</span> <span class="nx">Counter</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="nx">increment</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// We can call the `increment` prop,</span>
    <span class="c1">// and it will dispatch the action:</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">increment</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="nx">decrement</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">decrement</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">mapStateToProps</span><span class="p">(</span><span class="nx">state</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">count</span><span class="p">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">count</span>
  <span class="p">};</span>
<span class="p">}</span>

<span class="c1">// in this object, keys become prop names,</span>
<span class="c1">// and values should be action creator functions.</span>
<span class="c1">// They get bound to `dispatch`. </span>
<span class="kd">const</span> <span class="nx">mapDispatchToProps</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">increment</span><span class="p">,</span>
  <span class="nx">decrement</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">connect</span><span class="p">(</span><span class="nx">mapStateToProps</span><span class="p">,</span> <span class="nx">mapDispatchToProps</span><span class="p">)(</span><span class="nx">Counter</span><span class="p">);</span>
</code></pre></div></div>

<p>This is nice because it saves you from having to call <code class="highlighter-rouge">dispatch</code> manually.</p>

<p>You can also write <code class="highlighter-rouge">mapDispatch</code> as a function, but the object covers probably 95% of what you need. You can read more about the <a href="https://daveceddia.com/redux-mapdispatchtoprops-object-form/">functional mapDispatch form and why you probably don‚Äôt need it</a>.</p>

<h2 id="how-to-fetch-data-with-redux-thunk">How to Fetch Data with Redux Thunk</h2>

<p>Since reducers are supposed to be ‚Äúpure,‚Äù we can‚Äôt do any API calls or dispatch actions from inside a reducer.</p>

<p>We also can‚Äôt do that stuff inside a plain action creator!</p>

<p>But what if we could make an action creator <em>return</em> a function that could do our work? Something like this:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">getUser</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">fetch</span><span class="p">(</span><span class="s1">'/current_user'</span><span class="p">);</span>
  <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Out of the box, Redux doesn‚Äôt support actions like this. Stock Redux only accepts <em>plain objects</em> as actions.</p>

<p>This is where redux-thunk comes in. It is a <strong>middleware</strong>, basically a plugin for Redux, that enables Redux to deal with actions like <code class="highlighter-rouge">getUser()</code>, above.</p>

<p>You can dispatch these ‚Äúthunk actions‚Äù like any other action creator: <code class="highlighter-rouge">dispatch(getUser())</code>.</p>

<h3 id="whats-a-thunk">What‚Äôs a ‚Äúthunk‚Äù?</h3>

<p>A ‚Äúthunk‚Äù is a (uncommon) name for a <em>function</em> that‚Äôs returned by another function.</p>

<p>In Redux terms, it‚Äôs an action creator that returns a function instead of a plain action object, like this:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">doStuff</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">dispatch</span><span class="p">,</span> <span class="nx">getState</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// dispatch actions here</span>
    <span class="c1">// or fetch data</span>
    <span class="c1">// or whatever</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>If you wanna get technical, the function being returned is the ‚Äúthunk‚Äù, and the one that returns it is the ‚Äúaction creator‚Äù. Usually I call the whole bundle a ‚Äúthunk action.‚Äù</p>

<p>The function you return from your action creator will be passed 2 arguments: the <code class="highlighter-rouge">dispatch</code> function, and <code class="highlighter-rouge">getState</code>.</p>

<p>Most of the time you‚Äôll only need <code class="highlighter-rouge">dispatch</code>, but sometimes you want to do something conditionally, based on some value in the Redux state. In that case, call <code class="highlighter-rouge">getState()</code> and you‚Äôll have the entire state to read as needed.</p>

<h2 id="how-to-setup-redux-thunk">How to Setup Redux Thunk</h2>

<p>To install redux-thunk with NPM or Yarn, run <code class="highlighter-rouge">npm install --save redux-thunk</code>.</p>

<p>Then, in index.js (or wherever you create your store), import <code class="highlighter-rouge">redux-thunk</code> and apply it to the store with Redux‚Äôs <code class="highlighter-rouge">applyMiddleware</code> function:</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">thunk</span> <span class="k">from</span> <span class="s1">'redux-thunk'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">createStore</span><span class="p">,</span> <span class="nx">applyMiddleware</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'redux'</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">reducer</span><span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// ...</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="nx">createStore</span><span class="p">(</span>
  <span class="nx">reducer</span><span class="p">,</span>
  <span class="nx">applyMiddleware</span><span class="p">(</span><span class="nx">thunk</span><span class="p">)</span>
<span class="p">);</span>
</code></pre></div></div>

<p>Just make sure to wrap <code class="highlighter-rouge">thunk</code> in the <code class="highlighter-rouge">applyMiddlware</code> call or it won‚Äôt work. Don‚Äôt pass <code class="highlighter-rouge">thunk</code> directly.</p>

<h2 id="an-example-of-fetching-data-with-redux">An Example of Fetching Data with Redux</h2>

<p>Let‚Äôs imagine you want to display a list of products. You‚Äôve got a backend API that answers to <code class="highlighter-rouge">GET /products</code>, so you create this thunk action to do the fetching:</p>

<div class="code-filename">productActions.js</div>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">function</span> <span class="nx">fetchProducts</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">dispatch</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">dispatch</span><span class="p">(</span><span class="nx">fetchProductsBegin</span><span class="p">());</span>
    <span class="k">return</span> <span class="nx">fetch</span><span class="p">(</span><span class="s2">"/products"</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
      <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">json</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">dispatch</span><span class="p">(</span><span class="nx">fetchProductsSuccess</span><span class="p">(</span><span class="nx">json</span><span class="p">.</span><span class="nx">products</span><span class="p">));</span>
        <span class="k">return</span> <span class="nx">json</span><span class="p">.</span><span class="nx">products</span><span class="p">;</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="nx">dispatch</span><span class="p">(</span><span class="nx">fetchProductsFailure</span><span class="p">(</span><span class="nx">error</span><span class="p">)));</span>
  <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The <code class="highlighter-rouge">fetch("/products")</code> part is what‚Äôs actually fetching the data. Then we have a few calls to <code class="highlighter-rouge">dispatch</code> before and after.</p>

<h2 id="dispatch-the-action-to-fetch-the-data">Dispatch the Action to Fetch the Data</h2>

<p>To kick off the call and actually fetch the data, we need to dispatch the <code class="highlighter-rouge">fetchProducts</code> action.</p>

<p>Where should you do it?</p>

<p>If a particular component needs the data, the best place to kick off the fetch is usually right <em>after</em> that component mounts, in its <code class="highlighter-rouge">componentDidMount</code> lifecycle method.</p>

<p>Or, if you‚Äôre using Hooks, inside the useEffect hook is a good spot.</p>

<p>Sometimes you‚Äôre fetching truly <em>global</em> data that the whole app needs ‚Äì think ‚Äúuser profile‚Äù or ‚Äúi18n translations‚Äù. In those cases, dispatch the action right after you create the store, with <code class="highlighter-rouge">store.dispatch</code>, rather than waiting for a component to mount.</p>

<h3 id="how-to-name-your-redux-actions">How to Name Your Redux Actions</h3>

<p>Redux actions that fetch data usually come in triplets: BEGIN, SUCCESS, FAILURE. This isn‚Äôt a requirement, it‚Äôs only a convention.</p>

<p>This BEGIN/SUCCESS/FAILURE pattern is nice because it gives you hooks to keep track of what‚Äôs happening ‚Äì say, by setting a ‚Äúloading‚Äù flag <code class="highlighter-rouge">true</code> in response to the BEGIN action, and then <code class="highlighter-rouge">false</code> after SUCCESS or FAILURE.</p>

<p>And, as with pretty much everything else in Redux‚Ä¶ this, too, is a convention you can feel free to ignore if you don‚Äôt you need it.</p>

<p><em>Before</em> you start the API call, you dispatch the BEGIN action.</p>

<p>Then <em>after</em> the call succeeds, you dispatch SUCCESS with the data. If it failed instead, you dispatch FAILURE with the error.</p>

<p>Sometimes the last one is called ERROR instead. It doesn‚Äôt really matter what you call it, as long as you‚Äôre consistent about it.</p>

<p><strong>Careful</strong>: Dispatching an ERROR action and handling a FAILURE will lead to no end of hair pulling as you trace through your code, realizing the action is dispatching correctly but the data is never updating. Learn from my mistakes :)</p>

<p>Here‚Äôs what those actions look like, along with action creators for them:</p>

<div class="code-filename">productActions.js</div>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">FETCH_PRODUCTS_BEGIN</span>   <span class="o">=</span> <span class="s1">'FETCH_PRODUCTS_BEGIN'</span><span class="p">;</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">FETCH_PRODUCTS_SUCCESS</span> <span class="o">=</span> <span class="s1">'FETCH_PRODUCTS_SUCCESS'</span><span class="p">;</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">FETCH_PRODUCTS_FAILURE</span> <span class="o">=</span> <span class="s1">'FETCH_PRODUCTS_FAILURE'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">fetchProductsBegin</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">({</span>
  <span class="na">type</span><span class="p">:</span> <span class="nx">FETCH_PRODUCTS_BEGIN</span>
<span class="p">});</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">fetchProductsSuccess</span> <span class="o">=</span> <span class="nx">products</span> <span class="o">=&gt;</span> <span class="p">({</span>
  <span class="na">type</span><span class="p">:</span> <span class="nx">FETCH_PRODUCTS_SUCCESS</span><span class="p">,</span>
  <span class="na">payload</span><span class="p">:</span> <span class="p">{</span> <span class="nx">products</span> <span class="p">}</span>
<span class="p">});</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">fetchProductsFailure</span> <span class="o">=</span> <span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">({</span>
  <span class="na">type</span><span class="p">:</span> <span class="nx">FETCH_PRODUCTS_FAILURE</span><span class="p">,</span>
  <span class="na">payload</span><span class="p">:</span> <span class="p">{</span> <span class="nx">error</span> <span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div>

<p>We‚Äôll write a reducer to save the products into the Redux store when it receives the <code class="highlighter-rouge">FETCH_PRODUCTS_SUCCESS</code> action. It‚Äôll also set a <code class="highlighter-rouge">loading</code> flag to true when the fetch begins, and false when it finishes or fails.</p>

<div class="code-filename">productReducer.js</div>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span>
  <span class="nx">FETCH_PRODUCTS_BEGIN</span><span class="p">,</span>
  <span class="nx">FETCH_PRODUCTS_SUCCESS</span><span class="p">,</span>
  <span class="nx">FETCH_PRODUCTS_FAILURE</span>
<span class="p">}</span> <span class="k">from</span> <span class="s1">'./productActions'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">initialState</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">items</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">loading</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
  <span class="na">error</span><span class="p">:</span> <span class="kc">null</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">productReducer</span><span class="p">(</span><span class="nx">state</span> <span class="o">=</span> <span class="nx">initialState</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">switch</span><span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="nx">FETCH_PRODUCTS_BEGIN</span><span class="p">:</span>
      <span class="c1">// Mark the state as "loading" so we can show a spinner or something</span>
      <span class="c1">// Also, reset any errors. We're starting fresh.</span>
      <span class="k">return</span> <span class="p">{</span>
        <span class="p">...</span><span class="nx">state</span><span class="p">,</span>
        <span class="na">loading</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="na">error</span><span class="p">:</span> <span class="kc">null</span>
      <span class="p">};</span>

    <span class="k">case</span> <span class="nx">FETCH_PRODUCTS_SUCCESS</span><span class="p">:</span>
      <span class="c1">// All done: set loading "false".</span>
      <span class="c1">// Also, replace the items with the ones from the server</span>
      <span class="k">return</span> <span class="p">{</span>
        <span class="p">...</span><span class="nx">state</span><span class="p">,</span>
        <span class="na">loading</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="na">items</span><span class="p">:</span> <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">.</span><span class="nx">products</span>
      <span class="p">};</span>

    <span class="k">case</span> <span class="nx">FETCH_PRODUCTS_FAILURE</span><span class="p">:</span>
      <span class="c1">// The request failed. It's done. So set loading to "false".</span>
      <span class="c1">// Save the error, so we can display it somewhere.</span>
      <span class="c1">// Since it failed, we don't have items to display anymore, so set `items` empty.</span>
      <span class="c1">//</span>
      <span class="c1">// This is all up to you and your app though:</span>
      <span class="c1">// maybe you want to keep the items around!</span>
      <span class="c1">// Do whatever seems right for your use case.</span>
      <span class="k">return</span> <span class="p">{</span>
        <span class="p">...</span><span class="nx">state</span><span class="p">,</span>
        <span class="na">loading</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="na">error</span><span class="p">:</span> <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span><span class="p">.</span><span class="nx">error</span><span class="p">,</span>
        <span class="na">items</span><span class="p">:</span> <span class="p">[]</span>
      <span class="p">};</span>

    <span class="nl">default</span><span class="p">:</span>
      <span class="c1">// ALWAYS have a default case in a reducer</span>
      <span class="k">return</span> <span class="nx">state</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Finally, we need to pass the products into a <code class="highlighter-rouge">ProductList</code> component that will display them, and also be responsible for kicking off the data fetching.</p>

<div class="code-filename">ProductList.js</div>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="s2">"react"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">connect</span> <span class="p">}</span> <span class="k">from</span> <span class="s2">"react-redux"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">fetchProducts</span> <span class="p">}</span> <span class="k">from</span> <span class="s2">"/productActions"</span><span class="p">;</span>

<span class="kd">class</span> <span class="nx">ProductList</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
  <span class="nx">componentDidMount</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">dispatch</span><span class="p">(</span><span class="nx">fetchProducts</span><span class="p">());</span>
  <span class="p">}</span>

  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">error</span><span class="p">,</span> <span class="nx">loading</span><span class="p">,</span> <span class="nx">products</span> <span class="p">}</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>Error! <span class="si">{</span><span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;;</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">loading</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>Loading...<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="p">(</span>
      <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
        <span class="si">{</span><span class="nx">products</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">product</span> <span class="o">=&gt;</span>
          <span class="p">&lt;</span><span class="nt">li</span> <span class="na">key=</span><span class="si">{</span><span class="nx">product</span><span class="p">.</span><span class="nx">id</span><span class="si">}</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">product</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
        <span class="p">)</span><span class="si">}</span>
      <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">mapStateToProps</span> <span class="o">=</span> <span class="nx">state</span> <span class="o">=&gt;</span> <span class="p">({</span>
  <span class="na">products</span><span class="p">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">products</span><span class="p">.</span><span class="nx">items</span><span class="p">,</span>
  <span class="na">loading</span><span class="p">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">products</span><span class="p">.</span><span class="nx">loading</span><span class="p">,</span>
  <span class="na">error</span><span class="p">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">products</span><span class="p">.</span><span class="nx">error</span>
<span class="p">});</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">connect</span><span class="p">(</span><span class="nx">mapStateToProps</span><span class="p">)(</span><span class="nx">ProductList</span><span class="p">);</span>
</code></pre></div></div>

<p>I‚Äôm referring to the data with <code class="highlighter-rouge">state.products.&lt;whatever&gt;</code> instead of just <code class="highlighter-rouge">state.&lt;whatever&gt;</code> because I‚Äôm making the assumption that you‚Äôll probably have more than one reducer, each handling its own slice of state. To make this work, we can write a <code class="highlighter-rouge">rootReducer.js</code> file that pulls them all together:</p>

<div class="code-filename">rootReducer.js</div>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">combineReducers</span> <span class="p">}</span> <span class="k">from</span> <span class="s2">"redux"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">products</span> <span class="k">from</span> <span class="s2">"./productReducer"</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">combineReducers</span><span class="p">({</span>
  <span class="nx">products</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Then, when we create our store, we can pass this ‚Äúroot‚Äù reducer:</p>

<div class="code-filename">index.js</div>
<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">rootReducer</span> <span class="k">from</span> <span class="s1">'./rootReducer'</span><span class="p">;</span>

<span class="c1">// ...</span>

<span class="kd">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="nx">createStore</span><span class="p">(</span><span class="nx">rootReducer</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="error-handling-in-redux">Error Handling in Redux</h2>

<p>The error handling here is pretty light, but the basic structure will be the same for most actions that make API calls. The general idea is:</p>

<ol>
  <li>Dispatch a FAILURE action when the call fails</li>
  <li>Handle that FAILURE action in the reducer by setting some kind of flag and/or saving the error message.</li>
  <li>Pass the error flag and the message (if you have one) into components that need to handle errors, and conditionally render the error however you see fit.</li>
</ol>

<h3 id="can-you-avoid-the-double-render">Can You Avoid the Double Render?</h3>

<p>This is a really common concern. And yes, it <em>will</em> render more than once.</p>

<p>It will render in an empty state, then re-render in a loading state, and then re-render <em>again</em> with products to show. The horror! 3 renders! (you could get it down to 2 if you skip straight to the ‚Äúloading‚Äù state)</p>

<p>You may be worried about unnecessary renders because of performance, but don‚Äôt be: single renders are very fast. If you‚Äôre working on an app where they are slow enough to notice, do some profiling and figure out why that‚Äôs the case.</p>

<p>Think of it this way: the app needs to show <em>something</em> when there are no products, or when they‚Äôre loading, or when there‚Äôs an error. You probably don‚Äôt want to just show a blank screen until the data is ready. This gives you an opportunity to make that user experience shine.</p>

<h2 id="what-next">What Next?</h2>

<p>Hopefully this tutorial helped you make more sense of Redux!</p>

<p>If you want a deep dive on the specifics, the <a href="https://redux.js.org/">Redux docs</a> have a lot of good examples. Mark Erikson (one of the Redux maintainers) has a good <a href="https://blog.isquaredsoftware.com/series/idiomatic-redux/">series on idiomatic Redux</a> at his blog, too.</p>

<!-- Plus my new course [Pure Redux](https://daveceddia.com/pure-redux/) is on sale for 30% off. It covers everything here, plus building out an entire app complete with CRUD operations, authentication & session management, routing, and more. [Learn more here](https://daveceddia.com/pure-redux/)! -->

        
        
          
            














<div>
  <div class="dc_form_container redux-cta">
    <div class="dc_success_msg" style="display:none;">
      Success! Now check your email.
    </div>

    <!--  Form starts here  -->
    
    <form class="dc_signup_form" action="/s/signup" method="POST">
    
      <h4 class="dc_title">
Learn React + Redux
</h4>
      <div class="dc_description">
        
  <p>Struggling to break free of the tutorials?</p>
  <p>
  Learn how to build React apps with Redux in my new course, <a href="https://daveceddia.com/pure-redux/">Pure Redux</a>.
  </p>
  <p>
  It covers a ton of awesome stuff:
  </p>
  <ul>
    <li>All the Redux terms explained in detail</li>
    <li>Build a full React app start-to-finish</li>
    <li>CRUD operations on nested resources</li>
    <li>Middleware, selectors, routing, authentication</li>
  </ul>

  <p>
    <a href="https://daveceddia.com/pure-redux/">Check out Pure Redux</a>
  </p>

      </div>

      <div class="dc_error_msg" style="display:none">
        There was an error submitting your subscription. Please try again.
      </div>

      <div class="dc_field">
        <label class="dc_label" for="dc_email" style="display: none">Email Address</label>
        <input type="email" name="email" placeholder="Your email address" required="">
      </div>
      <input type="hidden" name="page_id" value="redux-tutorial" />
      <input type="hidden" name="form_id" value="redux-course-coming-soon" />
      <input type="hidden" name="form_version" value="1" />
      <input type="hidden" name="tag" value="823635,823523" />
      <button class="dc_subscribe_button" type="submit">
        Get a Discount on Launch Day
      </button>
      <div class="dc_guarantee">
         
      </div>
    </form>

    
<form class="dc_gdpr_form" action="/s/signup/gdpr" method="POST" style="display:none;">

  <p>Before we go on, I have to ask...</p>
  <div class="dc_form_field">
    <label>
      <input type="checkbox" name="confirm_answer" value="true"/>
      <span>consent</span>
    </label>
  </div>
  <br/>

  <div class="dc_error_msg" style="display:none">
    There was an error submitting your subscription. Please try again.
  </div>

  <input type="hidden" name="email" value="FILL_IN_WITH_JS" />
  <input type="hidden" name="firstName" value="FILL_IN_WITH_JS" />
  <input type="hidden" name="gdpr" value="FILL_IN_WITH_JS" />
  <input type="hidden" name="captcha" value="FILL_IN_WITH_JS" />
  <input type="hidden" name="sign" value="FILL_IN_WITH_JS" />
  <input type="hidden" name="confirm" value="FILL_IN_WITH_JS" />
  <input type="hidden" name="tag" value="823635" />
  <input type="hidden" name="page_id" value="redux-tutorial" />
  <input type="hidden" name="form_id" value="redux-course-coming-soon" />
  <input type="hidden" name="form_version" value="1" />
  <button type="submit" class="dc_subscribe_button">
    Finish
  </button>
</form>

  </div>

  <style type="text/css">
    .dc_form_container {
      border-top: 4px solid #3166de;
      border-bottom: 4px solid #3166de;
      padding: 1em;
      background: #f8faff;
      font-family: "Open Sans", sans-serif;
      margin-bottom: 2.5rem;
    }
    .dc_form_container .dc_title {
      margin-top: 0;
      text-align: center;
      font-weight: 400;
      font-size: 30px;
    }
    .dc_form_container .dc_description {
      margin-bottom: 10px;
    }
    .dc_signup_form, .dc_gdpr_form {
      margin-bottom: 0;
      position: relative;
    }
    .dc_signup_form input, .dc_gdpr_form input {
      width: 100%;
      padding: 20px 12px;
    }
    .dc_gdpr_form input[type="checkbox"] {
      width: initial;
      margin: 0;
      margin-right: 5px;
    }
    .dc_subscribe_button {
      margin: 0 auto;
      display: block;
      width: 100%;
      max-width: 250px;
      font-size: 18px;
      background: orange;
      color: #583900;
      border-color: #e29609;
      height: auto;
      margin-bottom: 5px;
    }
    .dc_subscribe_button[disabled] {
      opacity: 0.5;
    }
    .dc_subscribe_button[disabled]:hover {
      opacity: 0.5;
      color: #583900;
    }
    .dc_guarantee {
      font-size: 12px;
      text-align: center;
      opacity: 0.7;
    }
    .dc_success_msg {
      padding: 10px;
      background: #fff;
      border: 1px solid #8dc74a;
      border-radius: 2px;
      background: #F1F8E9;
      text-align: center;
    }
    .dc_error_msg {
      background: #FFEBEE;
      padding: 10px;
      margin-bottom: 5px;
      border: 2px solid #C62828;
    }
  </style>
</div>


<style>
.dc_form_container.redux-cta {
  border-top: 1px solid #6540b9;
  border-bottom: 1px solid #6540b9;
  border-left: 1px solid #d1d1d1;
  border-right: 1px solid #d1d1d1;
  background: #fbf9ff;
  padding: 5%;
}
.redux-cta .dc_subscribe_button {
  background: #6228d6;
  color: #fff;
  border: none;
  max-width: 100%;
}
.redux-cta .dc_subscribe_button:hover {
  border: none;
}
.redux-cta h3 { display: none; }
.redux-cta .dc_guarantee { display: none; }
.redux-cta .dc_field { display: none; }
.redux-cta .dc_form_field { display: none; }
.redux-cta .dc_subscribe_button { display: none; }
</style>

          
        
        
          <div id="commento"></div>
        
      </div><!-- /.entry-content -->
    </div><!-- /.entry-wrapper -->
  </article>
</div><!-- /#main -->

<div class="footer-wrapper muted-centered">
  <footer role="contentinfo">
    

<span>&copy; 2020 Dave Ceddia.</span>

  </footer>
</div><!-- /.footer-wrapper -->

<script type="text/javascript">
  window.BASE_URL = 'https://daveceddia.com';
</script>

<noscript><p><img alt="Clicky" width="1" height="1" src="//in.getclicky.com/100838734ns.gif" /></p></noscript>

<script type="text/javascript">
  var loadClicky;
  var loadGA;
  var loadCommento;


  loadGA = function() {
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-82635227-1', 'auto');
    ga('require', 'displayfeatures');
    ga('require', 'linkid');
    ga('send', 'pageview');
  }



  var clicky_site_ids = clicky_site_ids || [];
  clicky_site_ids.push(100838734);
  loadClicky = function() {
    var s = document.createElement('script');
    s.type = 'text/javascript';
    s.async = true;
    s.src = '//static.getclicky.com/js';
    ( document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0] ).appendChild( s );
  };



  loadCommento = function() {
    var element = document.createElement("script");
    element.src = "https://commento.daveceddia.com/js/commento.js";
    document.body.appendChild(element);
  }


  function loadJS() {
    var element = document.createElement("script");
    element.src = "https://daveceddia.com/assets/js/scripts.min.js";
    document.body.appendChild(element);

    if(loadClicky) loadClicky();
    if(loadGA) loadGA();
    if(loadCommento) loadCommento();
  }

  if (window.addEventListener) {
    window.addEventListener("load", loadJS, false);
  } else if (window.attachEvent) {
    window.attachEvent("onload", loadJS);
  } else {
    window.onload = loadJS;
  }
</script>



</body>
</html>
