{"ast":null,"code":"var _jsxFileName = \"C:\\\\PersonalProjects\\\\corpus-word-inventory\\\\book-inventory-ui\\\\src\\\\App.tsx\";\nimport React, { useState, useRef } from 'react';\nimport './App.css';\nimport Query from './components/Query/Query';\nimport Modal from './components/Modal/Modal';\nimport Page from './components/Pages/Page';\nimport QueryEditor from './components/QueryEditor/QueryEditor';\nimport DataController from './data.controller/data.controller';\nimport QueryViewer from './components/QueryViewer/QueryViewer';\nimport SummaryViewer from './components/SummaryViewer/SummaryViewer';\n\nfunction App() {\n  let dc = useRef(null);\n  dc.current === null && (dc.current = new DataController());\n  console.log('[App]: Data Controller Version: ', dc.current.getVersion());\n  const [isModalActive, setIsModalActive] = useState(false);\n  const [isEditingQuery, setIsEditingQuery] = useState(false);\n  const [isViewingResult, setIsViewingResult] = useState(false);\n  const [isViewingSummary, setIsViewingSummary] = useState(false);\n  const [isFetching, setIsFetching] = useState(false);\n  const [indexOfQueryOnModal, setIndexOfQueryOnModal] = useState(-1);\n  const [hasResults, setHasResults] = useState(false);\n  const [textToProcess, setTextToProcess] = useState(\"\");\n  const [feedback, setFeedback] = useState(\"\");\n  const [queries, setQueries] = useState([]);\n  const [queriesResults, setQueriesResults] = useState();\n\n  const handleQueryEdit = queryIndex => {\n    setIsEditingQuery(true);\n    setIndexOfQueryOnModal(queryIndex);\n    setIsModalActive(true);\n  };\n\n  const handleQueryView = queryIndex => {\n    setIsViewingResult(true);\n    setIndexOfQueryOnModal(queryIndex);\n    setIsModalActive(true);\n  };\n\n  const handleResultSummaryView = () => {\n    setIsViewingSummary(true); // setIndexOfQueryOnModal(queryIndex)\n\n    setIsModalActive(true);\n  };\n\n  const handleQueryRemoval = queryIndex => {\n    setQueries(qs => qs.filter((q, index) => index !== queryIndex));\n  };\n\n  const resetUi = () => {\n    setQueries([]);\n    setIsEditingQuery(false);\n    setIsViewingResult(false);\n    setIsViewingSummary(false);\n    setIndexOfQueryOnModal(-1);\n    setIsModalActive(false);\n    setTextToProcess(\"\");\n    setIsFetching(false);\n    setHasResults(false);\n    setFeedback(\"\");\n  };\n\n  const handleModalClose = () => {\n    setIsModalActive(false);\n    setTimeout(() => {\n      setIsEditingQuery(false);\n      setIsViewingResult(false);\n      setIsViewingSummary(false);\n      setIndexOfQueryOnModal(-1);\n    }, 300);\n  };\n\n  const handleBookProcessing = async () => {\n    var _dc$current;\n\n    setTimeout(() => {\n      setIsFetching(true);\n      setHasResults(false);\n      setFeedback(\"Processing Text. This will take a minute... or two...\");\n    }, 0);\n    const res = await ((_dc$current = dc.current) === null || _dc$current === void 0 ? void 0 : _dc$current.processBook({\n      book: textToProcess,\n      queries: queries\n    }, () => {}));\n    setQueriesResults(res);\n    setTimeout(() => {\n      setIsFetching(false);\n      setHasResults(true);\n      setFeedback(\"Text was successfully processed... \");\n    }, 0);\n    setTimeout(() => {\n      setFeedback(\"\");\n    }, 3000);\n  };\n\n  console.warn(\"[App]: Query Results: \", queriesResults);\n  return React.createElement(\"main\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(\"section\", {\n    className: \"app-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(\"section\", {\n    className: \"book-selector\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"selector-icons\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"reset-selection\",\n    onClick: evt => resetUi(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"fas fa-reply-all\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  })), hasResults && React.createElement(\"span\", {\n    className: \"view-result\",\n    onClick: evt => handleResultSummaryView(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"fas fa-eye\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }))), React.createElement(\"textarea\", {\n    onChange: evt => setTextToProcess(evt.target.value),\n    placeholder: \"Enter the text to be processed, or its url...\",\n    defaultValue: textToProcess,\n    value: textToProcess,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: `progressbar ${isFetching ? 'progressbar--running' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, feedback && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, feedback))), React.createElement(\"section\", {\n    className: \"queries-area\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, queries && queries.map((query, index) => React.createElement(Query, {\n    data: query,\n    key: index,\n    hasResults: hasResults,\n    index: index + 1,\n    onChange: () => handleQueryEdit(index),\n    onView: () => handleQueryView(index),\n    onRemove: () => handleQueryRemoval(index),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"add-query\",\n    onClick: evt => setQueries(queries => [...queries, {\n      minLength: 0,\n      maxLength: 10,\n      topN: 50\n    }]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"fas fa-plus\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, \"*Add Query\"))), React.createElement(\"section\", {\n    className: \"submit-button-area\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn btn-main\",\n    onClick: evt => handleBookProcessing(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, \"Process Content\")), React.createElement(\"section\", {\n    className: `modal-container ${isViewingResult || isViewingSummary ? 'modal-container--bg-white' : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, React.createElement(Modal, {\n    isActive: isModalActive,\n    onDeactivate: () => handleModalClose(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, React.createElement(Page, {\n    onClose: () => handleModalClose(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, isEditingQuery && React.createElement(QueryEditor, {\n    data: queries[indexOfQueryOnModal],\n    onChange: data => setQueries(qs => {\n      setTimeout(() => {\n        setIsEditingQuery(false);\n      }, 300);\n      setIsModalActive(false);\n      return qs.map((q, index) => {\n        index === indexOfQueryOnModal && (q = { ...data\n        });\n        return q;\n      });\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }), isViewingResult && queriesResults && React.createElement(QueryViewer, {\n    data: queriesResults === null || queriesResults === void 0 ? void 0 : queriesResults.results[indexOfQueryOnModal],\n    onClose: () => {},\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }), isViewingSummary && queriesResults && React.createElement(SummaryViewer, {\n    data: queriesResults,\n    onClose: () => {},\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }))))));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/PersonalProjects/corpus-word-inventory/book-inventory-ui/src/App.tsx"],"names":["React","useState","useRef","Query","Modal","Page","QueryEditor","DataController","QueryViewer","SummaryViewer","App","dc","current","console","log","getVersion","isModalActive","setIsModalActive","isEditingQuery","setIsEditingQuery","isViewingResult","setIsViewingResult","isViewingSummary","setIsViewingSummary","isFetching","setIsFetching","indexOfQueryOnModal","setIndexOfQueryOnModal","hasResults","setHasResults","textToProcess","setTextToProcess","feedback","setFeedback","queries","setQueries","queriesResults","setQueriesResults","handleQueryEdit","queryIndex","handleQueryView","handleResultSummaryView","handleQueryRemoval","qs","filter","q","index","resetUi","handleModalClose","setTimeout","handleBookProcessing","res","processBook","book","warn","evt","target","value","map","query","minLength","maxLength","topN","data","results"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport './App.css';\r\nimport { TUIQueryItem, TBookSummary } from './data.controller/data.types';\r\nimport Query from './components/Query/Query';\r\nimport Modal from './components/Modal/Modal';\r\nimport Page from './components/Pages/Page';\r\nimport QueryEditor from './components/QueryEditor/QueryEditor';\r\nimport DataController from './data.controller/data.controller';\r\nimport QueryViewer from './components/QueryViewer/QueryViewer';\r\nimport SummaryViewer from './components/SummaryViewer/SummaryViewer';\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n  let dc = useRef<DataController|null>(null);\r\n  (dc.current === null) && (dc.current = new DataController());\r\n  console.log('[App]: Data Controller Version: ', dc.current.getVersion())\r\n\r\n  const [isModalActive, setIsModalActive] = useState<boolean>(false)\r\n  const [isEditingQuery, setIsEditingQuery] = useState<boolean>(false)\r\n  const [isViewingResult, setIsViewingResult] = useState<boolean>(false)\r\n  const [isViewingSummary, setIsViewingSummary] = useState<boolean>(false)\r\n  const [isFetching, setIsFetching] = useState<boolean>(false)\r\n  const [indexOfQueryOnModal, setIndexOfQueryOnModal] = useState<number>(-1)\r\n  const [hasResults, setHasResults] = useState<boolean>(false)\r\n  const [textToProcess, setTextToProcess] = useState<string>(\"\")\r\n  const [feedback, setFeedback] = useState<string>(\"\")\r\n  const [queries, setQueries] = useState<TUIQueryItem[]>([])\r\n  const [queriesResults, setQueriesResults] = useState<TBookSummary|null>()\r\n\r\n  const handleQueryEdit = (queryIndex: number)=>{\r\n    setIsEditingQuery(true)\r\n    setIndexOfQueryOnModal(queryIndex)\r\n    setIsModalActive(true)\r\n  }\r\n  const handleQueryView = (queryIndex: number)=>{\r\n    setIsViewingResult(true)\r\n    setIndexOfQueryOnModal(queryIndex)\r\n    setIsModalActive(true)\r\n  }\r\n  const handleResultSummaryView = () =>{\r\n    setIsViewingSummary(true)\r\n    // setIndexOfQueryOnModal(queryIndex)\r\n    setIsModalActive(true)\r\n  }\r\n  const handleQueryRemoval = (queryIndex: number)=>{\r\n    setQueries(qs => qs.filter((q, index) => index !== queryIndex))\r\n  }\r\n  const resetUi = ()=>{\r\n    setQueries([]);\r\n    setIsEditingQuery(false)\r\n    setIsViewingResult(false)\r\n    setIsViewingSummary(false)\r\n    setIndexOfQueryOnModal(-1)\r\n    setIsModalActive(false)\r\n    setTextToProcess(\"\")\r\n    setIsFetching(false)\r\n    setHasResults(false)\r\n    setFeedback(\"\")\r\n  }\r\n  const handleModalClose = ()=>{\r\n    \r\n    setIsModalActive(false)\r\n\r\n    setTimeout(()=>{\r\n      setIsEditingQuery(false)\r\n      setIsViewingResult(false)\r\n      setIsViewingSummary(false)\r\n      setIndexOfQueryOnModal(-1)\r\n    }, 300)\r\n    \r\n  }\r\n  const handleBookProcessing = async ()=>{\r\n    \r\n    setTimeout(()=>{\r\n      setIsFetching(true)\r\n      setHasResults(false)\r\n      setFeedback(\"Processing Text. This will take a minute... or two...\")\r\n    }, 0)\r\n    \r\n    const res = await dc.current?.processBook({book: textToProcess, queries: queries}, ()=>{})\r\n    setQueriesResults(res)\r\n    \r\n\r\n    setTimeout(()=>{\r\n      setIsFetching(false)\r\n      setHasResults(true)\r\n      setFeedback(\"Text was successfully processed... \")\r\n    }, 0)\r\n\r\n    setTimeout(()=>{\r\n      setFeedback(\"\")\r\n    }, 3000)\r\n  }\r\n  console.warn(\"[App]: Query Results: \", queriesResults)\r\n  return (\r\n    <main className=\"App\">\r\n      <section className=\"app-container\">\r\n\r\n        <section className=\"book-selector\">\r\n          <div className=\"selector-icons\">\r\n            <span className=\"reset-selection\" onClick={evt => resetUi()}><i className=\"fas fa-reply-all\"></i></span>\r\n            {hasResults && (<span className=\"view-result\" onClick={evt => handleResultSummaryView()}><i className=\"fas fa-eye\"></i></span>)}\r\n          </div>\r\n\r\n          <textarea onChange={(evt)=>setTextToProcess(evt.target.value)}\r\n                    placeholder=\"Enter the text to be processed, or its url...\"\r\n                    defaultValue={textToProcess}\r\n                    value={textToProcess}\r\n          >\r\n          </textarea>\r\n          <div className={`progressbar ${isFetching ? 'progressbar--running' : ''}`}></div>\r\n\r\n          <div className=\"feedback\">\r\n            {feedback && (<p>{feedback}</p>)}\r\n          </div>\r\n        </section>\r\n\r\n\r\n\r\n\r\n        <section className=\"queries-area\">\r\n          {\r\n            queries && (\r\n              queries.map((query, index) => <Query data={query} key={index} hasResults={hasResults} index={index+1} onChange={()=>handleQueryEdit(index)} onView={()=>handleQueryView(index)} onRemove={()=>handleQueryRemoval(index)}/>)\r\n            )\r\n          }\r\n          <div className=\"add-query\" \r\n               onClick={evt=>setQueries(queries=> [...queries, {minLength: 0,maxLength: 10,topN: 50}])}>\r\n            <i className=\"fas fa-plus\"></i>\r\n            <span>*Add Query</span>\r\n          </div>\r\n        </section>\r\n\r\n\r\n\r\n\r\n\r\n        \r\n        <section className=\"submit-button-area\">\r\n          <button className=\"btn btn-main\" onClick={evt => handleBookProcessing()}>\r\n            Process Content\r\n          </button>\r\n        </section>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        <section className={`modal-container ${isViewingResult || isViewingSummary ? 'modal-container--bg-white' : ''}`}>\r\n          <Modal isActive={isModalActive} onDeactivate={()=>handleModalClose()} >\r\n            <Page onClose={()=>handleModalClose()}>\r\n              {\r\n                isEditingQuery && (\r\n                  <QueryEditor  data={queries[indexOfQueryOnModal]} \r\n                              onChange={data => setQueries(qs => {\r\n                                setTimeout(()=>{\r\n                                  setIsEditingQuery(false)\r\n                                }, 300)\r\n                                \r\n                                setIsModalActive(false)\r\n                                return qs.map((q, index) => {\r\n                                  (index === indexOfQueryOnModal) && (q = {...data})\r\n                                  return q\r\n                                })\r\n                              })}\r\n                  />\r\n                )\r\n              }\r\n              {\r\n                isViewingResult && queriesResults && (\r\n                  <QueryViewer data={queriesResults?.results[indexOfQueryOnModal]} onClose={()=>{}}/>\r\n                )\r\n              }\r\n\r\n              {\r\n                isViewingSummary && queriesResults && (\r\n                  <SummaryViewer data={queriesResults} onClose={()=>{}}/>\r\n                )\r\n              }\r\n            </Page>\r\n          </Modal>\r\n        </section>       \r\n\r\n\r\n\r\n\r\n      </section>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}