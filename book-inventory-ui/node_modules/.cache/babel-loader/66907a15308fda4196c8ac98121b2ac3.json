{"ast":null,"code":"const httpRequest = (_url, parameters, method = \"GET\", headers) => {\n  let _header = {\n    'content-type': 'application/json'\n  };\n  let url = _url; // Build generic options for fetch api\n\n  let options = {\n    method: method,\n    headers: { ..._header,\n      ...headers\n    } // mode: 'no-cors'\n\n  }; // Process Parameters/body\n\n  if (parameters) {\n    switch (method.toLowerCase()) {\n      case 'get':\n        // Build Request parameters in url \n        // Filter parameters to get non empty items on object\n        const keys = Object.keys(parameters);\n        const validParams = Object.values(parameters).reduce((acc, item, index) => {\n          item && (acc[keys[index]] = item);\n          return acc;\n        }, {}); // If parameters are not empty, append to url\n\n        if (Object.values(validParams).join(\"\")) {\n          url = url + Object.keys(validParams).reduce((acc, key, index) => `${acc}${index === 0 ? '?' : '&'}${key}=${validParams[key]}`, '');\n        }\n\n        break;\n\n      default:\n        // By default parameters will become the json body of the request\n        options[\"body\"] = JSON.stringify(parameters);\n        break;\n    }\n  }\n\n  console.log(`[fetch] Fetching at '${url}' with options '${JSON.stringify(options)}'`);\n  return new Promise((resolve, reject) => {\n    fetch(url, options) // fakeFetch(url, options)\n    .then(res => res.json()).then(data => resolve(data)).catch(err => reject(err));\n  });\n};\n\nexport default httpRequest;","map":{"version":3,"sources":["C:/PersonalProjects/corpus-word-inventory/book-inventory-ui/src/data.controller/utils/data.fetch.ts"],"names":["httpRequest","_url","parameters","method","headers","_header","url","options","toLowerCase","keys","Object","validParams","values","reduce","acc","item","index","join","key","JSON","stringify","console","log","Promise","resolve","reject","fetch","then","res","json","data","catch","err"],"mappings":"AACA,MAAMA,WAAW,GAAG,CACEC,IADF,EAEEC,UAFF,EAGEC,MAAc,GAAG,KAHnB,EAIEC,OAJF,KAIuC;AAGzD,MAAIC,OAAO,GAAG;AAAC,oBAAgB;AAAjB,GAAd;AACA,MAAIC,GAAW,GAAGL,IAAlB,CAJyD,CAUzD;;AACA,MAAIM,OAAY,GAAG;AACjBJ,IAAAA,MAAM,EAAEA,MADS;AAEjBC,IAAAA,OAAO,EAAE,EAAC,GAAGC,OAAJ;AAAa,SAAGD;AAAhB,KAFQ,CAGjB;;AAHiB,GAAnB,CAXyD,CAqBzD;;AACA,MAAGF,UAAH,EAAc;AACZ,YAAOC,MAAM,CAACK,WAAP,EAAP;AACE,WAAK,KAAL;AAEE;AACA;AACA,cAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYP,UAAZ,CAAb;AACA,cAAMS,WAAW,GAAGD,MAAM,CAACE,MAAP,CAAcV,UAAd,EACOW,MADP,CACc,CAACC,GAAD,EAAMC,IAAN,EAAYC,KAAZ,KAAsB;AAC1BD,UAAAA,IAAI,KAAKD,GAAG,CAACL,IAAI,CAACO,KAAD,CAAL,CAAH,GAAmBD,IAAxB,CAAJ;AACA,iBAAOD,GAAP;AACD,SAJT,EAKQ,EALR,CAApB,CALF,CAWE;;AACA,YAAGJ,MAAM,CAACE,MAAP,CAAcD,WAAd,EAA2BM,IAA3B,CAAgC,EAAhC,CAAH,EAAuC;AACrCX,UAAAA,GAAG,GAAGA,GAAG,GAAGI,MAAM,CAACD,IAAP,CAAYE,WAAZ,EAAyBE,MAAzB,CAAgC,CAACC,GAAD,EAAMI,GAAN,EAAWF,KAAX,KAAsB,GAAEF,GAAI,GAAEE,KAAK,KAAG,CAAR,GAAU,GAAV,GAAc,GAAI,GAAEE,GAAI,IAAGP,WAAW,CAACO,GAAD,CAAM,EAA1G,EAA6G,EAA7G,CAAZ;AACD;;AAED;;AACF;AACE;AACAX,QAAAA,OAAO,CAAC,MAAD,CAAP,GAAkBY,IAAI,CAACC,SAAL,CAAelB,UAAf,CAAlB;AACA;AArBJ;AAuBD;;AAEDmB,EAAAA,OAAO,CAACC,GAAR,CAAa,wBAAuBhB,GAAI,mBAAkBa,IAAI,CAACC,SAAL,CAAeb,OAAf,CAAwB,GAAlF;AAKA,SAAO,IAAIgB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,IAAAA,KAAK,CAACpB,GAAD,EAAMC,OAAN,CAAL,CACA;AADA,KAECoB,IAFD,CAEMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAFb,EAGCF,IAHD,CAGMG,IAAI,IAAEN,OAAO,CAACM,IAAD,CAHnB,EAICC,KAJD,CAIOC,GAAG,IAAIP,MAAM,CAACO,GAAD,CAJpB;AAKD,GANM,CAAP;AASD,CAlED;;AAqEA,eAAehC,WAAf","sourcesContent":["\r\nconst httpRequest = (\r\n                      _url: string, \r\n                      parameters?: {[key: string]:any},\r\n                      method: string = \"GET\",\r\n                      headers?: {[key:string]: string}) => {\r\n\r\n  \r\n  let _header = {'content-type': 'application/json'}\r\n  let url: string = _url;\r\n\r\n\r\n\r\n  \r\n\r\n  // Build generic options for fetch api\r\n  let options: any = {\r\n    method: method,\r\n    headers: {..._header, ...headers},\r\n    // mode: 'no-cors'\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  // Process Parameters/body\r\n  if(parameters){\r\n    switch(method.toLowerCase()){\r\n      case 'get':\r\n        \r\n        // Build Request parameters in url \r\n        // Filter parameters to get non empty items on object\r\n        const keys = Object.keys(parameters)\r\n        const validParams = Object.values(parameters)\r\n                                  .reduce((acc, item, index) => {\r\n                                      item && (acc[keys[index]] = item);\r\n                                      return acc;\r\n                                    }\r\n                                  , {})\r\n        // If parameters are not empty, append to url\r\n        if(Object.values(validParams).join(\"\")){\r\n          url = url + Object.keys(validParams).reduce((acc, key, index) => `${acc}${index===0?'?':'&'}${key}=${validParams[key]}`, '')\r\n        }\r\n                                  \r\n        break;\r\n      default:\r\n        // By default parameters will become the json body of the request\r\n        options[\"body\"] = JSON.stringify(parameters)\r\n        break\r\n    }\r\n  }\r\n\r\n  console.log(`[fetch] Fetching at '${url}' with options '${JSON.stringify(options)}'`)\r\n\r\n\r\n\r\n\r\n  return new Promise((resolve, reject) => {\r\n    fetch(url, options)\r\n    // fakeFetch(url, options)\r\n    .then(res => res.json())\r\n    .then(data=>resolve(data))\r\n    .catch(err => reject(err));\r\n  })\r\n\r\n  \r\n}\r\n\r\n\r\nexport default httpRequest;\r\n"]},"metadata":{},"sourceType":"module"}