{"ast":null,"code":"import httpRequest from \"./utils/data.fetch\";\nimport { typeConverter } from \"./data.types\";\nexport default class DataController {\n  // private urlBaseDevelopment: string = \"https://localhost:5051/\";\n  // private urlBaseProduction: string = \"https://corpus-inventory.herokuapp.com/\";\n  // private urlBaseProduction: string = `${window.location.origin}/`; //Prevent the cors error between http and https\n  // private urlGetABook: string = \"api/corpusinventory/{id}\";\n  // private setUiData: Function\n  // private timerID: any\n  // private dataRefreshRateSec: number = 15;\n  getVersion() {\n    return '1.0';\n  } // constructor(setUiData: Function){\n\n\n  constructor() {\n    this.urlBaseDevelopment = \"http://localhost:5050/\";\n    this.urlBase = \"\";\n    this.urlGetAllBooks = \"api/corpusinventory\";\n    this.urlProcessABook = \"api/corpusinventory\";\n    // Determine whether we shoudl use dev urls or production urls at heroku\n    // if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n    //   console.warn(\"[DC]: App is in Development Mode\");\n    //   this.urlBase = this.urlBaseDevelopment;\n    // } else {\n    //   console.warn(\"[DC]: App is in Production Mode\");\n    //   this.urlBase = this.urlBaseProduction;\n    // }\n    // this.urlBase = this.urlBaseDevelopment;\n    // this.urlBase = this.urlBaseProduction;\n    this.urlBase = `${window.location.origin}/`;\n\n    if (this.urlBase.indexOf(\"localhost\") !== -1) {\n      this.urlBase = this.urlBaseDevelopment;\n    } // this.setUiData = setUiData\n    // const _this = this\n    // this.timerID = setInterval(()=>{\n    //   _this.getBooks()\n    // }, this.dataRefreshRateSec)\n\n  } // Makes sure we are talking to right backend\n\n\n  buildURL(url) {\n    return `${this.urlBase}${url}`;\n  }\n\n  async getBooks() {\n    let rawBooks = await httpRequest(this.buildURL(this.urlGetAllBooks));\n    return rawBooks.map(rawBook => typeConverter.toBookSummary(rawBook));\n  }\n\n  async getBookById(bookId) {\n    let rawBook = await httpRequest(`${this.buildURL(this.urlGetAllBooks)}/${bookId}`);\n    return typeConverter.toBookSummary(rawBook);\n  }\n\n  processBook(uiQuery, cb) {\n    return new Promise(async (resolve, reject) => {\n      await httpRequest(`${this.buildURL(this.urlProcessABook)}`, uiQuery, \"POST\").then(res => {\n        console.log(res);\n        cb();\n        resolve(typeConverter.toBookSummary(res));\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/PersonalProjects/corpus-word-inventory/book-inventory-ui/src/data.controller/data.controller.ts"],"names":["httpRequest","typeConverter","DataController","getVersion","constructor","urlBaseDevelopment","urlBase","urlGetAllBooks","urlProcessABook","window","location","origin","indexOf","buildURL","url","getBooks","rawBooks","map","rawBook","toBookSummary","getBookById","bookId","processBook","uiQuery","cb","Promise","resolve","reject","then","res","console","log","catch","err"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,oBAAxB;AACA,SAAiCC,aAAjC,QAAsD,cAAtD;AAMA,eAAe,MAAMC,cAAN,CAAqB;AAClC;AAEA;AACA;AAGA;AAGA;AACA;AACA;AACAC,EAAAA,UAAU,GAAE;AACV,WAAO,KAAP;AACD,GAfiC,CAgBlC;;;AACAC,EAAAA,WAAW,GAAE;AAAA,SAfLC,kBAeK,GAfwB,wBAexB;AAAA,SAZLC,OAYK,GAZa,EAYb;AAAA,SAXLC,cAWK,GAXoB,qBAWpB;AAAA,SATLC,eASK,GATqB,qBASrB;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAKF,OAAL,GAAgB,GAAEG,MAAM,CAACC,QAAP,CAAgBC,MAAO,GAAzC;;AACA,QAAG,KAAKL,OAAL,CAAaM,OAAb,CAAqB,WAArB,MAAsC,CAAC,CAA1C,EAA4C;AAC1C,WAAKN,OAAL,GAAe,KAAKD,kBAApB;AACD,KAdU,CAeX;AAEA;AACA;AACA;AACA;;AAED,GAvCiC,CA4ClC;;;AACAQ,EAAAA,QAAQ,CAACC,GAAD,EAAa;AACnB,WAAQ,GAAE,KAAKR,OAAQ,GAAEQ,GAAI,EAA7B;AACD;;AAMD,QAAMC,QAAN,GAAyC;AACvC,QAAIC,QAAQ,GAAG,MAAMhB,WAAW,CAAC,KAAKa,QAAL,CAAc,KAAKN,cAAnB,CAAD,CAAhC;AACA,WAAQS,QAAD,CAAoBC,GAApB,CAAyBC,OAAD,IAAkBjB,aAAa,CAACkB,aAAd,CAA4BD,OAA5B,CAA1C,CAAP;AACD;;AACD,QAAME,WAAN,CAAkBC,MAAlB,EAA6D;AAC3D,QAAIH,OAAO,GAAG,MAAMlB,WAAW,CAAE,GAAE,KAAKa,QAAL,CAAc,KAAKN,cAAnB,CAAmC,IAAGc,MAAO,EAAjD,CAA/B;AACA,WAAOpB,aAAa,CAACkB,aAAd,CAA4BD,OAA5B,CAAP;AACD;;AACDI,EAAAA,WAAW,CAACC,OAAD,EAAoBC,EAApB,EAAwD;AACjE,WAAO,IAAIC,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC5C,YAAM3B,WAAW,CAAE,GAAE,KAAKa,QAAL,CAAc,KAAKL,eAAnB,CAAoC,EAAxC,EAA2Ce,OAA3C,EAAoD,MAApD,CAAX,CACLK,IADK,CACCC,GAAD,IAAO;AACXC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAL,QAAAA,EAAE;AACFE,QAAAA,OAAO,CAACzB,aAAa,CAACkB,aAAd,CAA4BU,GAA5B,CAAD,CAAP;AACD,OALK,EAMLG,KANK,CAMEC,GAAD,IAAO;AACZN,QAAAA,MAAM,CAACM,GAAD,CAAN;AACD,OARK,CAAN;AASD,KAVM,CAAP;AAYD;;AA1EiC","sourcesContent":["import httpRequest from \"./utils/data.fetch\";\r\nimport { TUIQuery, TBookSummary, typeConverter } from \"./data.types\";\r\n\r\n\r\n\r\n\r\n\r\nexport default class DataController {\r\n  // private urlBaseDevelopment: string = \"https://localhost:5051/\";\r\n  private urlBaseDevelopment: string = \"http://localhost:5050/\";\r\n  // private urlBaseProduction: string = \"https://corpus-inventory.herokuapp.com/\";\r\n  // private urlBaseProduction: string = `${window.location.origin}/`; //Prevent the cors error between http and https\r\n  private urlBase: string = \"\";\r\n  private urlGetAllBooks: string = \"api/corpusinventory\";\r\n  // private urlGetABook: string = \"api/corpusinventory/{id}\";\r\n  private urlProcessABook: string = \"api/corpusinventory\";\r\n\r\n  // private setUiData: Function\r\n  // private timerID: any\r\n  // private dataRefreshRateSec: number = 15;\r\n  getVersion(){\r\n    return '1.0'\r\n  }\r\n  // constructor(setUiData: Function){\r\n  constructor(){\r\n    // Determine whether we shoudl use dev urls or production urls at heroku\r\n    // if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\r\n    //   console.warn(\"[DC]: App is in Development Mode\");\r\n    //   this.urlBase = this.urlBaseDevelopment;\r\n    // } else {\r\n    //   console.warn(\"[DC]: App is in Production Mode\");\r\n    //   this.urlBase = this.urlBaseProduction;\r\n    // }\r\n    // this.urlBase = this.urlBaseDevelopment;\r\n    // this.urlBase = this.urlBaseProduction;\r\n    this.urlBase = `${window.location.origin}/`;\r\n    if(this.urlBase.indexOf(\"localhost\") !== -1){\r\n      this.urlBase = this.urlBaseDevelopment\r\n    }\r\n    // this.setUiData = setUiData\r\n\r\n    // const _this = this\r\n    // this.timerID = setInterval(()=>{\r\n    //   _this.getBooks()\r\n    // }, this.dataRefreshRateSec)\r\n\r\n  }\r\n  \r\n  \r\n\r\n\r\n  // Makes sure we are talking to right backend\r\n  buildURL(url: string){\r\n    return `${this.urlBase}${url}`\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  async getBooks(): Promise<TBookSummary[]>{\r\n    let rawBooks = await httpRequest(this.buildURL(this.urlGetAllBooks));\r\n    return (rawBooks as any[]).map((rawBook: any) => typeConverter.toBookSummary(rawBook))\r\n  }\r\n  async getBookById(bookId: string): Promise<TBookSummary|null>{\r\n    let rawBook = await httpRequest(`${this.buildURL(this.urlGetAllBooks)}/${bookId}`);\r\n    return typeConverter.toBookSummary(rawBook);\r\n  }\r\n  processBook(uiQuery: TUIQuery, cb: Function): Promise<TBookSummary>{\r\n    return new Promise(async (resolve, reject) => {\r\n      await httpRequest(`${this.buildURL(this.urlProcessABook)}`, uiQuery, \"POST\")\r\n      .then((res)=>{\r\n        console.log(res)\r\n        cb();\r\n        resolve(typeConverter.toBookSummary(res));\r\n      })\r\n      .catch((err)=>{\r\n        reject(err);\r\n      })\r\n    })\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n}"]},"metadata":{},"sourceType":"module"}