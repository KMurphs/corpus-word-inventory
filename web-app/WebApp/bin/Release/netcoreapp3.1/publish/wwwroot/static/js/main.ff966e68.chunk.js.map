{"version":3,"sources":["components/QueryEditor/QueryEditor.tsx","components/Query/Query.tsx","components/Modal/Modal.tsx","components/Pages/Page.tsx","components/CustomInput/CustomInput.tsx","data.controller/utils/data.fetch.ts","data.controller/data.types.ts","data.controller/data.controller.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["TUIQueryItemEnum","Query","data","index","onChange","onView","hasResults","onRemove","className","onClick","evt","topN","minLength","maxLength","Modal","children","onDeactivate","isActive","useState","isChildVisible","setIsChildVisible","isChildActivated","useRef","current","setTimeout","stopPropagation","Page","onClose","CustomInputText","value","handleChange","extraClasses","placeholder","disabled","preventDefault","type","target","CustomInputNumberUndefined","min","max","step","willPotentiallyCacheThis","toString","cachedValue","setCachedValue","undefined","defaultProps","Number","MAX_SAFE_INTEGER","QueryEditor","localData","_setLocalData","setLocalData","val","field","tmp","TOPN","parseFloat","MIN","MAX","httpRequest","_url","parameters","method","headers","_header","url","options","toLowerCase","keys","Object","validParams","values","reduce","acc","item","join","key","JSON","stringify","console","log","Promise","resolve","reject","fetch","then","res","json","catch","err","timestampToLocaleString","ts","Date","getTime","getTimezoneOffset","toISOString","replace","typeConverter","toBookSummary","bookObj","id","meta","idType","wordsCount","NaN","uniqueWordsCount","summaryDurationSec","createdAt","_createdAt","mostFrequentWord","this","toTokenSummary","longestWord","results","map","toQuerySummary","resObj","uiQuery","toUIQueryItem","durationMs","tokenObj","frequency","length","minTokenLength","maxTokenLength","topNCount","DataController","urlBaseDevelopment","urlBaseProduction","urlBase","urlGetAllBooks","urlProcessABook","warn","buildURL","rawBooks","rawBook","bookId","cb","a","App","dc","getVersion","isModalActive","setIsModalActive","isEditingQuery","setIsEditingQuery","indexOfQueryOnModal","setIndexOfQueryOnModal","setHasResults","textToProcess","setTextToProcess","queries","setQueries","queriesResults","setQueriesResults","handleBookProcessing","processBook","book","defaultValue","query","queryIndex","qs","filter","q","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.ff966e68.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\r\n\r\n\r\nimport './QueryEditor.css';\r\nimport { TUIQueryItem } from '../../data.controller/data.types';\r\nimport { CustomInputNumberUndefined } from '../CustomInput/CustomInput';\r\n\r\n\r\n\r\nenum TUIQueryItemEnum{\r\n  TOPN = 0,\r\n  MIN,\r\n  MAX\r\n}\r\ntype TProps = {\r\n  data: TUIQueryItem,\r\n  onChange: (updatedData: TUIQueryItem)=>void\r\n}\r\nconst QueryEditor: React.FC<TProps> = ({data, onChange}) => {\r\n\r\n  const [localData, _setLocalData] = useState<TUIQueryItem>(data)\r\n  const setLocalData = (val: string, field: TUIQueryItemEnum)=>{\r\n    let tmp: TUIQueryItem = localData;\r\n    (field === TUIQueryItemEnum.TOPN) && (tmp.topN = parseFloat(val));\r\n    (field === TUIQueryItemEnum.MIN) && (tmp.minLength = parseFloat(val));\r\n    (field === TUIQueryItemEnum.MAX) && (tmp.maxLength = parseFloat(val));\r\n    _setLocalData({...tmp});\r\n  }\r\n  return (\r\n              <div className=\"query-editor\">\r\n\r\n                <div className=\"query-item\">\r\n                  <div className={\"supporting-text\"}>Enter minimum length of tokens of interest</div>\r\n                  <CustomInputNumberUndefined value={localData.topN} handleChange={(val)=>setLocalData(val, TUIQueryItemEnum.TOPN)} />\r\n                </div>\r\n                \r\n                <div className=\"query-item\">\r\n                  <div className={\"supporting-text\"}>Enter minimum length of tokens of interest</div>\r\n                  <CustomInputNumberUndefined value={localData.minLength} handleChange={(val)=>setLocalData(val, TUIQueryItemEnum.MIN)} />\r\n                </div>\r\n\r\n                <div className=\"query-item\">\r\n                  <div className={\"supporting-text\"}>Enter minimum length of tokens of interest</div>\r\n                  <CustomInputNumberUndefined value={localData.maxLength} handleChange={(val)=>setLocalData(val, TUIQueryItemEnum.MAX)} />\r\n                </div>\r\n\r\n                <div className=\"query-item\">\r\n                  <button className=\"btn btn-main\" onClick={()=>onChange({...localData})}>Save Query</button>\r\n                </div>\r\n              </div>\r\n  );\r\n\r\n\r\n}\r\n\r\nexport default QueryEditor;\r\n","import React, { useState, useRef } from 'react';\r\n\r\n\r\nimport './Query.css';\r\nimport { TUIQueryItem } from '../../data.controller/data.types';\r\n\r\n\r\n\r\ntype TProps = {\r\n  data: TUIQueryItem,\r\n  index: number,\r\n  hasResults: boolean,\r\n  onChange: ()=>void\r\n  onRemove: ()=>void\r\n  onView: ()=>void\r\n}\r\nconst Query: React.FC<TProps> = ({data, index, onChange, onView, hasResults, onRemove}) => {\r\n\r\n\r\n  return (\r\n    <div className=\"query-container\">\r\n\r\n      <div className=\"query-header\">\r\n        <p className=\"query-index\">Query&nbsp;{index}</p>\r\n        <span className=\"query-icons\">\r\n          {\r\n            hasResults && (\r\n              <span className=\"query-result\" onClick={evt=>onView()}>\r\n                <i className=\"fas fa-eye\"></i>\r\n              </span>\r\n            )\r\n          }\r\n          <span className=\"query-edit\" onClick={evt=>onRemove()}><i className=\"fas fa-minus\"></i></span>\r\n          <span className=\"query-remove\" onClick={evt=>onChange()}><i className=\"fas fa-pencil-alt\"></i></span>\r\n          \r\n        </span>\r\n      </div>\r\n\r\n      <p className=\"query-text\">\r\n        {\r\n          `Retrieve top ${data.topN} most frequent tokens from text with length between ${data.minLength} and ${data.maxLength}`\r\n        }\r\n      </p>\r\n      \r\n    </div>\r\n  );\r\n\r\n\r\n}\r\n\r\nexport default Query;\r\n","import React, { useState, useRef } from 'react';\r\n\r\n\r\nimport './Modal.css';\r\n\r\n\r\n\r\ntype TProps = {\r\n  isActive: boolean\r\n  onDeactivate: ()=>void\r\n}\r\nconst Modal: React.FC<TProps> = ({children, onDeactivate,isActive}) => {\r\n\r\n  const [isChildVisible, setIsChildVisible] = useState<boolean>(false)\r\n  let isChildActivated = useRef<boolean>(false)  \r\n  if(isActive && !isChildActivated.current && !isChildVisible){\r\n    isChildActivated.current = true\r\n    setTimeout(()=>{\r\n      setIsChildVisible(true)\r\n    }, 300)     \r\n  }\r\n\r\n\r\n  return (\r\n    <div className={`modal-container ${isActive?'modal-container--active':''}`}\r\n          onClick={evt => {\r\n            isChildActivated.current = false\r\n            onDeactivate()\r\n            setIsChildVisible(false)\r\n            evt.stopPropagation()\r\n          }}\r\n    >\r\n      <div className={`modal-children-container ${isChildVisible?'modal-children--visible':''}`} onClick={evt => evt.stopPropagation()}>\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n\r\n}\r\n\r\nexport default Modal;\r\n","import React from 'react';\r\nimport './Page.css';\r\n\r\n\r\n\r\ntype TProps = {\r\n  onClose: ()=>void\r\n}\r\nconst Page: React.FC<TProps> = ({children, onClose}) => {\r\n\r\n  return (\r\n    <div className=\"page-component\">\r\n      <div className=\"page-content\">\r\n        {children}\r\n      </div>\r\n      <div className=\"close-page\" onClick={evt=>onClose()}><span><i className=\"fas fa-times-circle\"></i></span></div>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default Page","import React, { useState } from 'react';\r\nimport './CustomInput.css';\r\n\r\n\r\n\r\ntype Props = {\r\n    value: string,\r\n    handleChange: (newValue: string)=>void,\r\n    extraClasses?: string,\r\n    disabled?: boolean,\r\n    placeholder?: string\r\n}\r\ntype PropsNumber = {\r\n    value: number,\r\n    handleChange: (newValue: string)=>void,\r\n    extraClasses?: string,\r\n    placeholder?: string,\r\n    min?: number,\r\n    max?: number,\r\n    disabled?: boolean,\r\n    step?: number,\r\n}\r\n  \r\n  \r\nconst CustomInputText: React.FC<Props> = ({value, handleChange, extraClasses, placeholder, disabled}) => {\r\n    return (\r\n        <div className={`custom-input align-self-stretch flex flex-column ${extraClasses} ${disabled ? 'custom-input--disabled': ''}`}>\r\n            <div className='disabling-overlay' onClick={evt => {evt.stopPropagation(); evt.preventDefault()}}></div>\r\n            <input type=\"text\" value={value} onChange={evt=>handleChange(evt.target.value)} placeholder={placeholder}/>\r\n            <span className=\"pen-icon flex-centered\"><i className=\"fas fa-pen\"></i></span>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst CustomInputNumber: React.FC<PropsNumber> = ({value, handleChange, extraClasses, placeholder, disabled, min, max, step}) => {\r\n    return (\r\n        <div className={`custom-input align-self-stretch flex flex-column ${extraClasses} ${disabled ? 'custom-input--disabled': ''}`}>\r\n            <div className='disabling-overlay' onClick={evt => {evt.stopPropagation(); evt.preventDefault()}}></div>\r\n            <input type=\"number\" value={value} onChange={evt=>handleChange(evt.target.value)} min={min} max={max} step={step} placeholder={placeholder}/>\r\n            <span className=\"pen-icon flex-centered\"><i className=\"fas fa-pen\"></i></span>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst CustomInputNumberUndefined: React.FC<PropsNumber> = ({value, handleChange, extraClasses, placeholder, disabled, min, max, step}) => {\r\n    // This component will allow the input field to remain empty while the user is typing.\r\n    // It is therefore agnostic of the empty/undefined/null value policy of the higher compoennt/source of truth\r\n    // While the field is empty the last value from the source of truth is cached.\r\n    // This only works under the assumption that the value can only change from this field, and that the source of\r\n    // truth does not in anyway coerce/update/cahnge this value\r\n\r\n    // To allow the field to remain empty while the user is typing\r\n    // Give the illusion to the source of truth (higher component) that the value never becomes empty:\r\n    // When it actually does, cache the current value received from props and send that to the source of truth\r\n    // on subsequent re-renders until the user enters a non null value\r\n    // thus allowing the input field to remain empty, and prevent it to be coerced to some value by a source\r\n    // of truth that does not like empty fields...\r\n    const willPotentiallyCacheThis: string = value.toString() \r\n    const [cachedValue, setCachedValue] = useState<string|undefined>()\r\n    \r\n    return (\r\n        <div className={`custom-input align-self-stretch flex flex-column ${extraClasses} ${disabled ? 'custom-input--disabled': ''}`}>\r\n            <div className='disabling-overlay' onClick={evt => {evt.stopPropagation(); evt.preventDefault()}}></div>\r\n            <input type=\"number\" value={cachedValue ? '' : value} onChange={evt=>{\r\n                    if(!evt.target.value){\r\n                        setCachedValue(willPotentiallyCacheThis);\r\n                        handleChange(willPotentiallyCacheThis);\r\n                    }else{\r\n                        setCachedValue(undefined)\r\n                        handleChange(evt.target.value);\r\n                    }\r\n                }} min={min} max={max} step={step} placeholder={placeholder}/>\r\n            <span className=\"pen-icon flex-centered\"><i className=\"fas fa-pen\"></i></span>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nconst CustomInputTextPassword: React.FC<Props> = ({value, handleChange, extraClasses, placeholder, disabled}) => {\r\n    return (\r\n        <div className={`custom-input align-self-stretch flex flex-column ${extraClasses} ${disabled ? 'custom-input--disabled': ''}`}>\r\n            <div className='disabling-overlay' onClick={evt => {evt.stopPropagation(); evt.preventDefault()}}></div>\r\n            <input type=\"password\" value={value} onChange={evt=>handleChange(evt.target.value)} placeholder={placeholder}/>\r\n            <span className=\"pen-icon flex-centered\"><i className=\"fas fa-pen\"></i></span>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst CustomInputNumberPassword: React.FC<Props> = ({value, handleChange, extraClasses, placeholder, disabled}) => {\r\n    return (\r\n        <div className={`custom-input align-self-stretch flex flex-column ${extraClasses} ${disabled ? 'custom-input--disabled': ''}`}>\r\n            <div className='disabling-overlay' onClick={evt => {evt.stopPropagation(); evt.preventDefault()}}></div>\r\n            <input type=\"password\" pattern=\"[0-9]*\" value={value === 'NaN' ? '' : value} onChange={evt=>handleChange(evt.target.value)} placeholder={placeholder}/>\r\n            <span className=\"pen-icon flex-centered\"><i className=\"fas fa-pen\"></i></span>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n  \r\nCustomInputText.defaultProps = {\r\n    value: '',\r\n    extraClasses: '',\r\n    placeholder: 'Your Input Here',\r\n    disabled: false\r\n}\r\nCustomInputNumber.defaultProps = {\r\n    value: 0,\r\n    extraClasses: '',\r\n    placeholder: 'Your Input Here',\r\n    min: -1*Number.MAX_SAFE_INTEGER,\r\n    max: Number.MAX_SAFE_INTEGER,\r\n    step: 1,\r\n    disabled: false\r\n}\r\nCustomInputTextPassword.defaultProps = {...CustomInputText.defaultProps}\r\nCustomInputNumberPassword.defaultProps = {...CustomInputText.defaultProps}\r\nexport { CustomInputText, CustomInputNumber, CustomInputTextPassword, CustomInputNumberPassword, CustomInputNumberUndefined };","\r\nconst httpRequest = (\r\n                      _url: string, \r\n                      parameters?: {[key: string]:any},\r\n                      method: string = \"GET\",\r\n                      headers?: {[key:string]: string}) => {\r\n\r\n  \r\n  let _header = {'content-type': 'application/json'}\r\n  let url: string = _url;\r\n\r\n\r\n\r\n  \r\n\r\n  // Build generic options for fetch api\r\n  let options: any = {\r\n    method: method,\r\n    headers: {..._header, ...headers},\r\n    // mode: 'no-cors'\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  // Process Parameters/body\r\n  if(parameters){\r\n    switch(method.toLowerCase()){\r\n      case 'get':\r\n        \r\n        // Build Request parameters in url \r\n        // Filter parameters to get non empty items on object\r\n        const keys = Object.keys(parameters)\r\n        const validParams = Object.values(parameters)\r\n                                  .reduce((acc, item, index) => {\r\n                                      item && (acc[keys[index]] = item);\r\n                                      return acc;\r\n                                    }\r\n                                  , {})\r\n        // If parameters are not empty, append to url\r\n        if(Object.values(validParams).join(\"\")){\r\n          url = url + Object.keys(validParams).reduce((acc, key, index) => `${acc}${index===0?'?':'&'}${key}=${validParams[key]}`, '')\r\n        }\r\n                                  \r\n        break;\r\n      default:\r\n        // By default parameters will become the json body of the request\r\n        options[\"body\"] = JSON.stringify(parameters)\r\n        break\r\n    }\r\n  }\r\n\r\n  console.log(`[fetch] Fetching at '${url}' with options '${JSON.stringify(options)}'`)\r\n\r\n\r\n\r\n\r\n  return new Promise((resolve, reject) => {\r\n    fetch(url, options)\r\n    // fakeFetch(url, options)\r\n    .then(res => res.json())\r\n    .then(data=>resolve(data))\r\n    .catch(err => reject(err));\r\n  })\r\n\r\n  \r\n}\r\n\r\n\r\nexport default httpRequest;\r\n","\r\nexport type TBookSummary = {\r\n  id: string,\r\n  meta: string,\r\n  idType: string,\r\n  wordsCount: number,\r\n  uniqueWordsCount: number,\r\n  mostFrequentWord: TTokenSummary,\r\n  longestWord: TTokenSummary,\r\n  summaryDurationSec: number,\r\n  createdAt: number,\r\n  _createdAt: string,\r\n  results: TQuerySummary[]\r\n}\r\n\r\n\r\nexport type TTokenSummary = {\r\n  key: string,\r\n  frequency: number,\r\n  length: number\r\n}\r\n\r\nexport type TQuerySummary = {\r\n  uiQuery: TUIQueryItem\r\n  createdAt: number\r\n  _createdAt: string\r\n  durationMs: number\r\n  data: TTokenSummary[]\r\n}\r\n\r\n\r\n\r\nexport type TUIQueryItem = {\r\n  minLength: number,\r\n  maxLength: number,\r\n  topN: number\r\n}\r\n\r\nexport type TUIQuery = {\r\n  book: string,\r\n  queries: TUIQueryItem[]\r\n}\r\n\r\nexport type TTypeConverter = {\r\n  toBookSummary: (bookObj: any) => TBookSummary,\r\n  toTokenSummary: (tokenObj: any) => TTokenSummary,\r\n  toQuerySummary: (resObj: any) => TQuerySummary,\r\n  toUIQueryItem: (minTokenLength: number, maxTokenLength: number, topNCount: number) => TUIQueryItem\r\n}\r\n\r\n\r\nconst timestampToLocaleString = (ts: number)=>new Date(new Date(ts).getTime() - new Date().getTimezoneOffset() * 60000).toISOString().replace(/.[0-9]+Z$/,'').replace('T',' ')\r\nconst typeConverter: TTypeConverter = {\r\n  toBookSummary(bookObj: any): TBookSummary{\r\n    return {\r\n      id: bookObj[\"id\"] ? bookObj[\"id\"] : \"\",\r\n      meta: bookObj[\"meta\"] ? bookObj[\"meta\"] : \"\",\r\n      idType: bookObj[\"idType\"] ? bookObj[\"idType\"] : \"\",\r\n\r\n      wordsCount: bookObj[\"wordsCount\"] || bookObj[\"wordsCount\"] === 0 ? bookObj[\"wordsCount\"] : NaN,\r\n      uniqueWordsCount: bookObj[\"uniqueWordsCount\"] || bookObj[\"uniqueWordsCount\"] === 0  ? bookObj[\"uniqueWordsCount\"] : NaN,\r\n      summaryDurationSec: bookObj[\"summaryDurationSec\"] || bookObj[\"summaryDurationSec\"] === 0  ? bookObj[\"summaryDurationSec\"] : NaN,\r\n      createdAt: bookObj[\"createdAt\"] ? bookObj[\"createdAt\"] : 0,\r\n      _createdAt: bookObj[\"createdAt\"] ? timestampToLocaleString(bookObj[\"createdAt\"]) : \"Invalid Date\",\r\n\r\n      mostFrequentWord: this.toTokenSummary(bookObj[\"mostFrequentWord\"]),\r\n      longestWord: this.toTokenSummary(bookObj[\"longestWord\"]),\r\n      \r\n      results: bookObj[\"results\"] ? bookObj[\"results\"].map((res: any) => this.toQuerySummary(res)) : []\r\n    }\r\n  },\r\n\r\n\r\n\r\n  toQuerySummary(resObj: any): TQuerySummary {\r\n      return {\r\n        uiQuery: this.toUIQueryItem(resObj[\"minTokenLength\"], resObj[\"maxTokenLength\"], resObj[\"topNCount\"]),\r\n        createdAt: resObj[\"createdAt\"] ? resObj[\"createdAt\"] : 0,\r\n        _createdAt: resObj[\"createdAt\"] ? timestampToLocaleString(resObj[\"createdAt\"]) : \"Invalid Date\",\r\n        durationMs: resObj[\"durationMs\"] || resObj[\"durationMs\"] === 0 ? resObj[\"durationMs\"] : NaN,\r\n        data: resObj[\"data\"] ? resObj[\"data\"].map((item: any) => this.toTokenSummary(item)) : []\r\n      }\r\n  },\r\n\r\n\r\n  toTokenSummary(tokenObj: any): TTokenSummary {\r\n      return {\r\n        key: tokenObj[\"key\"] ? tokenObj[\"key\"] : \"\",\r\n        frequency: tokenObj[\"frequency\"] || tokenObj[\"frequency\"] === 0 ? tokenObj[\"frequency\"] : NaN,\r\n        length: tokenObj[\"length\"] || tokenObj[\"length\"] === 0 ? tokenObj[\"length\"] : NaN,\r\n      }\r\n  },\r\n\r\n\r\n  toUIQueryItem(minTokenLength: number, maxTokenLength: number, topNCount: number): TUIQueryItem {\r\n      return {\r\n        minLength: minTokenLength || minTokenLength === 0 ? minTokenLength : NaN,\r\n        maxLength: maxTokenLength || maxTokenLength === 0  ? maxTokenLength : NaN,\r\n        topN: topNCount || topNCount === 0  ? topNCount : NaN,\r\n      }\r\n  }\r\n}\r\n\r\nexport {typeConverter};\r\n","import httpRequest from \"./utils/data.fetch\";\r\nimport { TUIQuery, TBookSummary, typeConverter } from \"./data.types\";\r\n\r\n\r\n\r\n\r\n\r\nexport default class DataController {\r\n  // private urlBaseDevelopment: string = \"https://localhost:5051/\";\r\n  private urlBaseDevelopment: string = \"http://localhost:5050/\";\r\n  private urlBaseProduction: string = \"https://corpus-inventory.herokuapp.com/\";\r\n  private urlBase: string = \"\";\r\n  private urlGetAllBooks: string = \"api/corpusinventory\";\r\n  // private urlGetABook: string = \"api/corpusinventory/{id}\";\r\n  private urlProcessABook: string = \"api/corpusinventory\";\r\n\r\n  // private setUiData: Function\r\n  // private timerID: any\r\n  // private dataRefreshRateSec: number = 15;\r\n  getVersion(){\r\n    return '1.0'\r\n  }\r\n  // constructor(setUiData: Function){\r\n  constructor(){\r\n    // Determine whether we shoudl use dev urls or production urls at heroku\r\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\r\n      console.warn(\"[DC]: App is in Development Mode\");\r\n      this.urlBase = this.urlBaseDevelopment;\r\n    } else {\r\n      console.warn(\"[DC]: App is in Production Mode\");\r\n      this.urlBase = this.urlBaseProduction;\r\n    }\r\n    this.urlBase = this.urlBaseDevelopment;\r\n    // this.setUiData = setUiData\r\n\r\n    // const _this = this\r\n    // this.timerID = setInterval(()=>{\r\n    //   _this.getBooks()\r\n    // }, this.dataRefreshRateSec)\r\n\r\n  }\r\n  \r\n  \r\n\r\n\r\n  // Makes sure we are talking to right backend\r\n  buildURL(url: string){\r\n    return `${this.urlBase}${url}`\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  async getBooks(): Promise<TBookSummary[]>{\r\n    let rawBooks = await httpRequest(this.buildURL(this.urlGetAllBooks));\r\n    return (rawBooks as any[]).map((rawBook: any) => typeConverter.toBookSummary(rawBook))\r\n  }\r\n  async getBookById(bookId: string): Promise<TBookSummary|null>{\r\n    let rawBook = await httpRequest(`${this.buildURL(this.urlGetAllBooks)}/${bookId}`);\r\n    return typeConverter.toBookSummary(rawBook);\r\n  }\r\n  processBook(uiQuery: TUIQuery, cb: Function): Promise<TBookSummary>{\r\n    return new Promise(async (resolve, reject) => {\r\n      await httpRequest(`${this.buildURL(this.urlProcessABook)}`, uiQuery, \"POST\")\r\n      .then((res)=>{\r\n        console.log(res)\r\n        cb();\r\n        resolve(typeConverter.toBookSummary(res));\r\n      })\r\n      .catch((err)=>{\r\n        reject(err);\r\n      })\r\n    })\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n}","import React, { useState, useRef } from 'react';\nimport './App.css';\nimport { TUIQueryItem, TBookSummary } from './data.controller/data.types';\nimport Query from './components/Query/Query';\nimport Modal from './components/Modal/Modal';\nimport { CustomInputNumberUndefined } from './components/CustomInput/CustomInput';\nimport Page from './components/Pages/Page';\nimport QueryEditor from './components/QueryEditor/QueryEditor';\nimport DataController from './data.controller/data.controller';\n\n\n\nfunction App() {\n\n  let dc = useRef<DataController|null>(null);\n  (dc.current === null) && (dc.current = new DataController());\n  console.log('[App]: Data Controller Version: ', dc.current.getVersion())\n\n  const [isModalActive, setIsModalActive] = useState<boolean>(false)\n  const [isEditingQuery, setIsEditingQuery] = useState<boolean>(false)\n  const [indexOfQueryOnModal, setIndexOfQueryOnModal] = useState<number>(-1)\n  const [hasResults, setHasResults] = useState<boolean>(false)\n  const [textToProcess, setTextToProcess] = useState<string>(\"\")\n  const [queries, setQueries] = useState<TUIQueryItem[]>([])\n  const [queriesResults, setQueriesResults] = useState<TBookSummary|null>()\n\n  const handleQueryEdit = (queryIndex: number)=>{\n    setIsEditingQuery(true)\n    setIndexOfQueryOnModal(queryIndex)\n    setIsModalActive(true)\n  }\n  const handleQueryView = (queryIndex: number)=>{\n    setIsEditingQuery(true)\n    setIndexOfQueryOnModal(queryIndex)\n    setIsModalActive(true)\n  }\n  const handleResultSummaryView = () =>{\n    setIsEditingQuery(true)\n    // setIndexOfQueryOnModal(queryIndex)\n    setIsModalActive(true)\n  }\n  const handleQueryRemoval = (queryIndex: number)=>{\n    setQueries(qs => qs.filter((q, index) => index !== queryIndex))\n  }\n  const resetUi = ()=>{\n    setQueries([]);\n    setIsEditingQuery(false)\n    setIndexOfQueryOnModal(-1)\n    setIsModalActive(false)\n    setTextToProcess(\"\")\n  }\n  const handleBookProcessing = async ()=>{\n    const res = await dc.current?.processBook({book: textToProcess, queries: queries}, ()=>{})\n    setQueriesResults(res)\n    setHasResults(true)\n  }\n  console.warn(\"[App]: Query Results: \", queriesResults)\n  return (\n    <main className=\"App\">\n      <section className=\"app-container\">\n\n        <section className=\"book-selector\">\n          <div className=\"selector-icons\">\n            <span className=\"reset-selection\" onClick={evt => resetUi()}><i className=\"fas fa-reply-all\"></i></span>\n            {hasResults && (<span className=\"view-result\" onClick={evt => handleResultSummaryView()}><i className=\"fas fa-eye\"></i></span>)}\n          </div>\n\n          <textarea onChange={(evt)=>setTextToProcess(evt.target.value)}\n                    placeholder=\"Enter the text to be processed, or its url...\"\n                    defaultValue={textToProcess}\n          >\n          </textarea>\n        </section>\n\n\n\n\n        <section className=\"queries-area\">\n          {\n            queries && (\n              queries.map((query, index) => <Query data={query} key={index} hasResults={hasResults} index={index+1} onChange={()=>handleQueryEdit(index)} onView={()=>handleQueryView(index)} onRemove={()=>handleQueryRemoval(index)}/>)\n            )\n          }\n          <div className=\"add-query\" \n               onClick={evt=>setQueries(queries=> [...queries, {minLength: 0,maxLength: 10,topN: 50}])}>\n            <i className=\"fas fa-plus\"></i>\n            <span>*Add Query</span>\n          </div>\n        </section>\n\n\n\n\n\n        \n        <section className=\"submit-button-area\">\n          <button className=\"btn btn-main\" onClick={evt => handleBookProcessing()}>\n            Process Content\n          </button>\n        </section>\n\n\n\n\n\n\n        <section className=\"modal-container\">\n          <Modal isActive={isModalActive} onDeactivate={()=>setIsModalActive(false)}>\n            <Page onClose={()=>setIsModalActive(false)}>\n              {\n                isEditingQuery && (\n                  <QueryEditor  data={queries[indexOfQueryOnModal]} \n                              onChange={data => setQueries(qs => {\n                                setTimeout(()=>{\n                                  setIsEditingQuery(false)\n                                }, 300)\n                                \n                                setIsModalActive(false)\n                                return qs.map((q, index) => {\n                                  (index === indexOfQueryOnModal) && (q = {...data})\n                                  return q\n                                })\n                              })}\n                  />\n                )\n              }\n            </Page>\n          </Modal>\n        </section>       \n\n\n\n\n      </section>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}