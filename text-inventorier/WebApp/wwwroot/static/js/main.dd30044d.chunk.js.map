{"version":3,"sources":["utils/ScrollToTop.tsx","utils/utils.ts","components/CSSLoaders/index.tsx","utils/useIntersect.ts","utils/AnimateOnScroll/index.tsx","components/Home/index.tsx","data.controller/utils/data.fetch.ts","data.controller/data.types.ts","data.controller/data.controller.ts","contexts/context.tsx","components/AutoGrowingTextArea/index.tsx","components/AutoGrowingTextArea/withContext.tsx","components/InputWithMovingLabel/index.tsx","components/InputWithMovingLabel/withContext.tsx","components/TwoRangeInput/index.tsx","components/TwoRangeInput/withContext.tsx","components/Query/index.tsx","components/Histogram/TwoCategorySymmetricHistogram.tsx","components/Details/index.tsx","components/Results/index.tsx","utils/ScrollToURI.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ScrollToTop","pathname","useLocation","useEffect","window","scrollTo","scrollIDIntoViewHelper","targetID","clickEvent","targetURI","preventDefault","targetElmt","document","getElementById","scrollIntoView","behavior","block","history","pushState","scrollURLIDIntoViewHelper","smooth","url","location","href","split","target","length","toLowerCase","element","CSSLoaderEllipsis","className","React","Component","CSSLoaderDualRing","thresholdsHelper","steps","Array","from","keys","i","useIntersect","root","rootMargin","threshold","onObservedIntersection","useState","targetNode","setTargetNode","intersectionObj","useRef","observer","cleanupObserver","current","disconnect","IntersectionObserver","entry","observe","animateOnScroll","animateClassName","intersectionRatio","classList","add","boundingClientRect","top","rootBounds","bottom","remove","Home","headerRef","pRef","btnRef","ref","data-aos","onClick","evt","httpRequest","_url","parameters","method","headers","_header","options","Object","validParams","values","reduce","acc","item","index","join","key","JSON","stringify","Promise","resolve","reject","fetch","then","res","json","data","catch","err","timestampToLocaleString","ts","Date","getTime","getTimezoneOffset","toISOString","replace","typeConverter","toTextSummary","textObj","id","meta","idType","wordsCount","NaN","uniqueWordsCount","summaryDurationSec","createdAt","_createdAt","mostFrequentWord","this","toTokenSummary","leastFrequentWord","longestWord","shortestWord","results","map","toQuerySummary","resObj","uiQuery","toUIQueryItem","durationMs","tokenObj","frequency","minTokenLength","maxTokenLength","topNCount","minLength","maxLength","topN","DataController","urlBaseDevelopment","urlBase","urlGetAllTexts","urlProcessAText","origin","indexOf","uri","buildURL","rawTexts","rawText","textId","cb","a","console","log","queryMinLengthContext","createContext","queryMaxLengthContext","queryMostFrequentCountContext","queryTextToProcessContext","dataControllerContext","queryResultsContext","DisplayQueryMinLength","useContext","queryMinLength","DisplayQueryMaxLength","queryMaxLength","DisplayQueryMostFrequentParameter","queryMostFrequent","AutoGrowingTextArea","text","setText","data-replicated-value","name","required","rows","onInput","value","htmlFor","defaultProps","AutoGrowingTextAreaWithContext","queryText","setQueryText","InputWithMovingChangingLabel","setValue","type","onChange","parseInt","InputWithMovingChangingLabelWithContext","setQueryMostFrequent","TwoRangeInput","rangeLow","rangeHigh","valueLow","valueHigh","setValueLow","setValueHigh","style","min","max","step","Math","initialLow","initialHigh","TwoRangeInputWithContext","setQueryMinLength","setQueryMaxLength","Query","textareaRef","summaryRef","inputRef","executeQuery","HistogramHeader","category1Header","category2Header","onSort","isCompact","HistogramData","category1Maximum","category2Maximum","category1Max","category1Value","category2Max","category2Value","graphRef","label","category1Annotation","category2Annotation","HistogramDataItem","flexBasis","Details","byLength","directionIsAscending","sortParameters","setSortParameters","waitingForServer","queryResultsFromContext","queryResults","mostFrequent","longest","sort","b","titleRef","group1Ref","group2Ref","newValue","toFixed","Results","leastFrequent","shortest","ScrollToURI","timeout","useLayoutEffect","callback","setTimeout","addEventListener","removeEventListener","App","dataController","getVersion","h1Ref","msgRef","linksRef","exact","path","to","rel","Boolean","hostname","match","ReactDOM","render","children","setQueryResults","isExecutingQuery","setIsExecutingQuery","processText","queries","Provider","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.dd30044d.chunk.js","sourcesContent":["import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\n\r\n// https://reactrouter.com/web/guides/scroll-restoration\r\n// React router does not reliably handle scrolling to the current element \r\n// When we need to resort to doing it ourselves, this component when rendered will force a scroll to top\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","// https://javascriptio.com/view/4915713/react-navigation-that-will-smooth-scroll-to-section-of-the-page\r\n// https://codesandbox.io/s/falling-https-jwrj3?file=/src/App.tsx:636-686\r\n\r\nexport const scrollIDIntoViewHelper = (targetID: string, clickEvent: any, targetURI?: string)=>{\r\n  \r\n  // We are essentially hijacking the click event which does not really work with react router\r\n  clickEvent && clickEvent.preventDefault && clickEvent.preventDefault();\r\n\r\n  // Scroll element with provided id into view\r\n  const targetElmt = document.getElementById(targetID);\r\n  targetElmt && targetElmt.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\r\n\r\n  // Update the url\r\n  window.history.pushState(targetID, targetID, `/${targetURI ? targetURI : targetID}`);\r\n}\r\n\r\nexport const scrollURLIDIntoViewHelper = (smooth: boolean = false)=>{\r\n  \r\n  // This function assumes that the last uri corresponds to the id of the element\r\n  // that must be scrolled into view\r\n  let url = window.location.href.split(\"/\");\r\n  let target = url[url.length - 1].toLowerCase();\r\n  let element = document.getElementById(target);\r\n\r\n  // Adjust view to display component with id from uri\r\n  element && element.scrollIntoView(smooth ? { behavior: \"smooth\", block: \"start\" } : { block: \"start\" });\r\n}\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport './style.css';\r\n\r\n\r\nexport class CSSLoaderEllipsis extends React.Component {\r\n  render() {\r\n    return <div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>;\r\n  }\r\n}\r\n\r\n\r\nexport class CSSLoaderDualRing extends React.Component {\r\n  render() {\r\n    return <div className=\"lds-dual-ring\"></div>;\r\n  }\r\n}","import { useEffect, useRef, useState } from \"react\";\r\n\r\n\r\n\r\n// https://medium.com/the-non-traditional-developer/how-to-use-an-intersectionobserver-in-a-react-hook-9fb061ac6cb5\r\n// https://codesandbox.io/s/04vvrxj79p\r\n\r\ntype Props = {\r\n  root?: Element | null, \r\n  rootMargin?: string, \r\n  threshold?: number | number[],\r\n  onObservedIntersection: (entry: IntersectionObserverEntry ) => void\r\n}\r\n\r\nexport const thresholdsHelper = (steps: number) => Array.from(Array(steps).keys(), i => (i / steps) + (1 / (2 * steps)))\r\n\r\nexport const useIntersect = ({ root = null, rootMargin = \"0px\", threshold = [.25, .75], onObservedIntersection }: Props): [React.Dispatch<React.SetStateAction<Element | null>>, ()=>(IntersectionObserverEntry | null)]  => {\r\n\r\n  // 1. Let's link to a html node (the target to observe) as state persistent through rerenders\r\n  const [targetNode, setTargetNode] = useState<Element|null>(null);\r\n\r\n  // Provide a way to send the intersectionObj to the client for debugging purposes\r\n  const intersectionObj = useRef<IntersectionObserverEntry|null>(null);\r\n  const getIntersectionObject = (): IntersectionObserverEntry|null => {return intersectionObj.current}\r\n\r\n\r\n\r\n  // 2. let's create our observer. But we want it be remebered, and not recreated between re-renders\r\n  // Also We cannot call useRef inside a callback\r\n  // So we create here a bogus ref hook, that we will attach to an acutal observer later on\r\n  const observer = useRef<IntersectionObserver>()\r\n\r\n\r\n  \r\n  \r\n\r\n  // 3. useEffect: This happens after render is done, and just before re-render it is cleaned up\r\n  const cleanupObserver = () => observer && observer.current && observer.current.disconnect && observer.current.disconnect();\r\n  useEffect(()=>{\r\n\r\n    // cleanupObserver();\r\n\r\n    // Create the oberver after the render, and start the observation\r\n    observer.current = new IntersectionObserver(([entry])=>{\r\n      // console.log(entry.target.tagName, entry.intersectionRatio, entry.boundingClientRect)\r\n      onObservedIntersection(entry)\r\n      intersectionObj.current = entry;\r\n\r\n    }, { root, rootMargin, threshold })\r\n    targetNode && observer && observer.current && observer.current.observe && observer.current.observe(targetNode)\r\n\r\n\r\n    // Before re-render clean up my observer. We will build another one just after next rerender\r\n    return cleanupObserver;\r\n\r\n\r\n  // Reactualize this hook and its oberver when these are changed\r\n  // Node is included here, because at the very beginning it is null\r\n  // onObservedIntersection is added to prevent a compiler warning\r\n  }, [targetNode, root, rootMargin, threshold, onObservedIntersection])\r\n\r\n\r\n\r\n\r\n  return [setTargetNode, getIntersectionObject];\r\n};\r\n\r\n\r\n\r\n","\r\n\r\nexport default function animateOnScroll(entry: IntersectionObserverEntry, animateClassName: string = \"animate\"){\r\n\r\n  // console.log(entry.target.className, entry.intersectionRatio, entry.boundingClientRect.top, (entry.rootBounds ? entry.rootBounds.bottom : -1))\r\n\r\n  if(entry.intersectionRatio >= .5){\r\n    entry.target.classList.add(animateClassName);\r\n  }\r\n\r\n  if(entry.boundingClientRect.top >= (entry.rootBounds ? entry.rootBounds.bottom : 0)){\r\n    entry.target.classList.remove(animateClassName);\r\n  }\r\n\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport ScrollToTop from \"../../utils/ScrollToTop\";\r\nimport { scrollIDIntoViewHelper } from \"../../utils/utils\";\r\nimport { CSSLoaderEllipsis } from \"../CSSLoaders\";\r\nimport './style.css';\r\n\r\nimport {useIntersect} from \"../../utils/useIntersect\";\r\nimport animateOnScroll from \"../../utils/AnimateOnScroll\";\r\n\r\n\r\n\r\n// React router does not reliably handle scrolling to the current element \r\n// We need to resort to doing it ourselves\r\n// Everytime this component is rendered, ScrollToTop is going to rendered, forcing a scroll back to top\r\nexport const Home = () => {\r\n\r\n\r\n  // const ref = useRef(null);\r\n  // const [ref, entry] = useIntersect({\r\n  //   threshold: Array.from(Array(2).keys(), i => i / 100),\r\n  //   callback: ( entry ) => {if(entry.intersectionRatio > .5) console.log(entry);}\r\n  // });\r\n  // const [ref, entry] = useIntersect({ threshold: 1 });\r\n\r\n\r\n  const [headerRef] = useIntersect({onObservedIntersection: animateOnScroll});\r\n  const [pRef] = useIntersect({onObservedIntersection: animateOnScroll});\r\n  const [btnRef] = useIntersect({onObservedIntersection: animateOnScroll});\r\n\r\n\r\n  return (\r\n    <div className=\"container home__container\">\r\n      <ScrollToTop/>\r\n      <div className=\"home__background\"></div>\r\n      <div className=\"home__header\" ref={headerRef} data-aos=\"zoom-out\">\r\n        <h1>Word Inventorier</h1>\r\n        <p>This app will inventory text and allow querying for most frequent words with lengths ranges</p>\r\n      </div>\r\n      <div className=\"home__body\">\r\n        <div ref={pRef} data-aos=\"fade-left\" className=\"home__body__text-container\">\r\n          <CSSLoaderEllipsis/>\r\n          <p><br/>Let's start by entering some text to get going. Or, the URL to an online text file...</p>\r\n        </div>\r\n        \r\n\r\n        {/* <AnimateOnSCrollExample /> */}\r\n        <a className=\"btn btn--text-icon\" href=\"/\" onClick={evt => scrollIDIntoViewHelper(\"query\", evt)} data-aos=\"fade-right\" ref={btnRef}> \r\n          <i className=\"fas fa-pencil-alt\"></i>\r\n          <span className=\"btn__text\">Start Exploring!</span>    \r\n        </a> \r\n\r\n\r\n        \r\n      </div>\r\n    </div>\r\n  )\r\n}","/**\r\n * This function will build and make a http request, then package the response and return it.\r\n * Works with GET, POST, PUT\r\n * @param  {string} _url\r\n * @param  {{[key:string]:any}} parameters?\r\n * @param  {string=\"GET\"} method\r\n * @param  {{[key:string]:string}} headers?\r\n * @returns Promise\r\n */\r\nconst DEBUG = 0;\r\nconst httpRequest = (\r\n                      _url: string, \r\n                      parameters?: {[key: string]:any},\r\n                      method: string = \"GET\",\r\n                      headers?: {[key:string]: string}): Promise<any> => {\r\n\r\n  \r\n  let _header = {'content-type': 'application/json'}\r\n  let url: string = _url;\r\n\r\n\r\n\r\n  \r\n\r\n  // Build generic options for fetch api\r\n  let options: any = {\r\n    method: method,\r\n    headers: {..._header, ...headers},\r\n    // mode: 'no-cors'\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  // Process Parameters/body\r\n  if(parameters){\r\n    switch(method.toLowerCase()){\r\n      case 'get':\r\n        \r\n        // Build Request parameters in url \r\n        // Filter parameters to get non empty items on object\r\n        const keys = Object.keys(parameters)\r\n        const validParams = Object.values(parameters)\r\n                                  .reduce((acc, item, index) => {\r\n                                      item && (acc[keys[index]] = item);\r\n                                      return acc;\r\n                                    }\r\n                                  , {})\r\n        // If parameters are not empty, append to url\r\n        if(Object.values(validParams).join(\"\")){\r\n          url = url + Object.keys(validParams).reduce((acc, key, index) => `${acc}${index===0?'?':'&'}${key}=${validParams[key]}`, '')\r\n        }\r\n                                  \r\n        break;\r\n      default:\r\n        // By default parameters will become the json body of the request\r\n        options[\"body\"] = JSON.stringify(parameters)\r\n        break\r\n    }\r\n  }\r\n\r\n  DEBUG && console.log(`[fetch] Fetching at '${url}' with options '${JSON.stringify(options)}'`)\r\n\r\n\r\n\r\n\r\n  return new Promise((resolve, reject) => {\r\n    fetch(url, options)\r\n    // fakeFetch(url, options)\r\n    .then(res => res.json())\r\n    .then(data=>resolve(data))\r\n    .catch(err => reject(err));\r\n  })\r\n\r\n  \r\n}\r\n\r\n\r\nexport default httpRequest;\r\n","\r\nexport type TTextSummary = {\r\n  id: string,\r\n  meta: string,\r\n  idType: string,\r\n  wordsCount: number,\r\n  uniqueWordsCount: number,\r\n  mostFrequentWord: TTokenSummary,\r\n  leastFrequentWord: TTokenSummary,\r\n  longestWord: TTokenSummary,\r\n  shortestWord: TTokenSummary,\r\n  summaryDurationSec: number,\r\n  createdAt: number,\r\n  _createdAt: string,\r\n  results: TQuerySummary[]\r\n}\r\n\r\n\r\nexport type TTokenSummary = {\r\n  key: string,\r\n  frequency: number,\r\n  length: number\r\n}\r\n\r\nexport type TQuerySummary = {\r\n  uiQuery: TUIQueryItem\r\n  createdAt: number\r\n  _createdAt: string\r\n  durationMs: number\r\n  data: TTokenSummary[]\r\n}\r\n\r\n\r\n\r\nexport type TUIQueryItem = {\r\n  minLength: number,\r\n  maxLength: number,\r\n  topN: number\r\n}\r\n\r\nexport type TUIQuery = {\r\n  text: string,\r\n  queries: TUIQueryItem[]\r\n}\r\n\r\nexport type TTypeConverter = {\r\n  toTextSummary: (textObj: any) => TTextSummary,\r\n  toTokenSummary: (tokenObj: any) => TTokenSummary,\r\n  toQuerySummary: (resObj: any) => TQuerySummary,\r\n  toUIQueryItem: (minTokenLength: number, maxTokenLength: number, topNCount: number) => TUIQueryItem\r\n}\r\n\r\n\r\nconst timestampToLocaleString = (ts: number)=>new Date(new Date(ts).getTime() - new Date().getTimezoneOffset() * 60000).toISOString().replace(/.[0-9]+Z$/,'').replace('T',' ')\r\nconst typeConverter: TTypeConverter = {\r\n  toTextSummary(textObj: any): TTextSummary{\r\n    return {\r\n      id: textObj[\"id\"] ? textObj[\"id\"] : \"\",\r\n      meta: textObj[\"meta\"] ? textObj[\"meta\"] : \"\",\r\n      idType: textObj[\"idType\"] ? textObj[\"idType\"] : \"\",\r\n\r\n      wordsCount: textObj[\"wordsCount\"] || textObj[\"wordsCount\"] === 0 ? textObj[\"wordsCount\"] : NaN,\r\n      uniqueWordsCount: textObj[\"uniqueWordsCount\"] || textObj[\"uniqueWordsCount\"] === 0  ? textObj[\"uniqueWordsCount\"] : NaN,\r\n      summaryDurationSec: textObj[\"summaryDurationSec\"] || textObj[\"summaryDurationSec\"] === 0  ? textObj[\"summaryDurationSec\"] : NaN,\r\n      createdAt: textObj[\"createdAt\"] ? textObj[\"createdAt\"] : 0,\r\n      _createdAt: textObj[\"createdAt\"] ? timestampToLocaleString(textObj[\"createdAt\"]) : \"Invalid Date\",\r\n\r\n      mostFrequentWord: this.toTokenSummary(textObj[\"mostFrequentWord\"]),\r\n      leastFrequentWord: this.toTokenSummary(textObj[\"leastFrequentWord\"]),\r\n      longestWord: this.toTokenSummary(textObj[\"longestWord\"]),\r\n      shortestWord: this.toTokenSummary(textObj[\"shortestWord\"]),\r\n      \r\n      results: textObj[\"results\"] ? textObj[\"results\"].map((res: any) => this.toQuerySummary(res)) : []\r\n    }\r\n  },\r\n\r\n\r\n\r\n  toQuerySummary(resObj: any): TQuerySummary {\r\n      return {\r\n        uiQuery: this.toUIQueryItem(resObj[\"minTokenLength\"], resObj[\"maxTokenLength\"], resObj[\"topNCount\"]),\r\n        createdAt: resObj[\"createdAt\"] ? resObj[\"createdAt\"] : 0,\r\n        _createdAt: resObj[\"createdAt\"] ? timestampToLocaleString(resObj[\"createdAt\"]) : \"Invalid Date\",\r\n        durationMs: resObj[\"durationMs\"] || resObj[\"durationMs\"] === 0 ? resObj[\"durationMs\"] : NaN,\r\n        data: resObj[\"data\"] ? resObj[\"data\"].map((item: any) => this.toTokenSummary(item)) : []\r\n      }\r\n  },\r\n\r\n\r\n  toTokenSummary(tokenObj: any): TTokenSummary {\r\n      return {\r\n        key: tokenObj[\"key\"] ? tokenObj[\"key\"] : \"\",\r\n        frequency: tokenObj[\"frequency\"] || tokenObj[\"frequency\"] === 0 ? tokenObj[\"frequency\"] : NaN,\r\n        length: tokenObj[\"length\"] || tokenObj[\"length\"] === 0 ? tokenObj[\"length\"] : NaN,\r\n      }\r\n  },\r\n\r\n\r\n  toUIQueryItem(minTokenLength: number, maxTokenLength: number, topNCount: number): TUIQueryItem {\r\n      return {\r\n        minLength: minTokenLength || minTokenLength === 0 ? minTokenLength : NaN,\r\n        maxLength: maxTokenLength || maxTokenLength === 0  ? maxTokenLength : NaN,\r\n        topN: topNCount || topNCount === 0  ? topNCount : NaN,\r\n      }\r\n  }\r\n}\r\n\r\nexport {typeConverter};\r\n","import httpRequest from \"./utils/data.fetch\";\r\nimport { TUIQuery, TTextSummary, typeConverter } from \"./data.types\";\r\n\r\n\r\n\r\n\r\n\r\nexport default class DataController {\r\n  private urlBaseDevelopment: string = \"http://localhost:5050/\";\r\n  private urlBase: string = \"\";\r\n  private urlGetAllTexts: string = \"api/corpusinventory\";\r\n  private urlProcessAText: string = \"api/corpusinventory\";\r\n\r\n\r\n\r\n  getVersion(){\r\n    return '1.1'\r\n  }\r\n\r\n\r\n\r\n  constructor(){\r\n    this.urlBase = `${window.location.origin}/`;\r\n    if(this.urlBase.indexOf(\"localhost\") !== -1){\r\n      this.urlBase = this.urlBaseDevelopment\r\n    }\r\n  }\r\n  \r\n  \r\n\r\n\r\n\r\n  /**\r\n   * Ensures we are talking to right backend (dev url or production url)\r\n   * \r\n   * @param  {string} uri: Endpoint of interest for a particular request\r\n   */\r\n  buildURL(uri: string){\r\n    return `${this.urlBase}${uri}`\r\n  }\r\n\r\n  /**\r\n   * Retrieves the complete list of processing results of texts previously submitted to the backend\r\n   * \r\n   * @returns Promise\\<TTextSummary[]\\>\r\n   */\r\n  async getTexts(): Promise<TTextSummary[]>{\r\n    let rawTexts = await httpRequest(this.buildURL(this.urlGetAllTexts));\r\n    return (rawTexts as any[]).map((rawText: any) => typeConverter.toTextSummary(rawText))\r\n  }\r\n  \r\n  /**\r\n   * Function will retrieve Processing Results from previously suubmitted text\r\n   * This text would be identified by an id that is passed as argument to this function\r\n   * \r\n   * @param  {string} textId\r\n   * @returns Promise\\<TTextSummary|null\\>\r\n   */\r\n  async getTextById(textId: string): Promise<TTextSummary|null>{\r\n    let rawText = await httpRequest(`${this.buildURL(this.urlGetAllTexts)}/${textId}`);\r\n    return typeConverter.toTextSummary(rawText);\r\n  }\r\n\r\n  /**\r\n   * This function will receive a query data structure and will return a new data structure formed with the server response to the request\r\n   * \r\n   * Example Call:\r\n   * \r\n   * const text = await dc.processText({\r\n   *    text: \"Where is my my umbrella\",\r\n   *    queries: [{\r\n   *        minLength: 0,\r\n   *        maxLength: 3,\r\n   *        topN: 2\r\n   *    }]\r\n   * }, cb);\r\n   * \r\n   * .\r\n   * \r\n   * @param  {TUIQuery} uiQuery: Text to process and Array of query items i.e. [{ minLength: number, maxLength: number, topN: number }]\r\n   * @param  {Function} cb: Callback - Called when server response has been received and successfully processed\r\n   * @returns Promise\\<TTextSummary\\>\r\n   */\r\n  processText(uiQuery: TUIQuery, cb?: Function): Promise<TTextSummary>{\r\n    return new Promise(async (resolve, reject) => {\r\n      await httpRequest(`${this.buildURL(this.urlProcessAText)}`, uiQuery, \"POST\")\r\n      .then((res)=>{\r\n        console.log(res)\r\n        cb && cb();\r\n        resolve(typeConverter.toTextSummary(res));\r\n      })\r\n      .catch((err)=>{\r\n        reject(err);\r\n      })\r\n    })\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n}","import React, { useContext, useState } from \"react\";\r\nimport DataController from \"../data.controller/data.controller\";\r\nimport { TTextSummary } from \"../data.controller/data.types\";\r\n\r\n\r\nexport const queryMinLengthContext = React.createContext<[number, React.Dispatch<React.SetStateAction<number>>]>([0, ()=>{}]);\r\nexport const queryMaxLengthContext = React.createContext<[number, React.Dispatch<React.SetStateAction<number>>]>([0, ()=>{}]);\r\nexport const queryMostFrequentCountContext = React.createContext<[number, React.Dispatch<React.SetStateAction<number>>]>([0, ()=>{}]);\r\nexport const queryTextToProcessContext = React.createContext<[string, React.Dispatch<React.SetStateAction<string>>]>([\"\", ()=>{}]);\r\nexport const dataControllerContext = React.createContext<[Function, boolean, DataController]>([()=>{}, false, new DataController()]);\r\nexport const queryResultsContext = React.createContext<TTextSummary | null>(null);\r\n\r\n\r\ninterface Props {\r\n  children: React.ReactNode[] | React.ReactNode\r\n}\r\nexport const AppContextProvider = ({children}: Props)=>{\r\n\r\n  const [queryMinLength, setQueryMinLength] = useState(0)\r\n  const [queryMaxLength, setQueryMaxLength] = useState(50)\r\n  const [queryMostFrequent, setQueryMostFrequent] = useState(50)\r\n  const [queryText, setQueryText] = useState(\"\")\r\n  const [queryResults, setQueryResults] = useState<TTextSummary | null>(null)\r\n  const [isExecutingQuery, setIsExecutingQuery] = useState(false)\r\n  // const isExecutingQuery = useRef(false)\r\n\r\n  const dataController = new DataController();\r\n\r\n  const executeQuery = async () => {\r\n    \r\n    // isExecutingQuery.current = true\r\n    // setQueryResults(null)\r\n    setIsExecutingQuery(true)\r\n\r\n    dataController.processText({\r\n      text: queryText,\r\n      queries: [{\r\n        minLength: queryMinLength,\r\n        maxLength: queryMaxLength,\r\n        topN: queryMostFrequent\r\n      }]\r\n    }).then((res) => {\r\n\r\n      return new Promise<TTextSummary>((resolve) => {\r\n        setTimeout(()=>{\r\n          resolve(res);\r\n        }, 500)\r\n      })\r\n\r\n    }).then((res) => {\r\n      // isExecutingQuery.current = false;\r\n      setQueryResults(res)\r\n      setIsExecutingQuery(false)\r\n      console.log(res);\r\n    });\r\n    \r\n  }\r\n\r\n  const waitingForServer = isExecutingQuery\r\n  // const waitingForServer = isExecutingQuery.current\r\n\r\n\r\n  return (\r\n    <dataControllerContext.Provider value={[executeQuery, waitingForServer, dataController]}>\r\n      <queryMaxLengthContext.Provider value={[queryMaxLength, setQueryMaxLength]}>\r\n        <queryMinLengthContext.Provider value={[queryMinLength, setQueryMinLength]}>\r\n          <queryMostFrequentCountContext.Provider value={[queryMostFrequent, setQueryMostFrequent]}>\r\n            <queryTextToProcessContext.Provider value={[queryText, setQueryText]}>\r\n              <queryResultsContext.Provider value={queryResults}>\r\n                { children }\r\n              </queryResultsContext.Provider>\r\n            </queryTextToProcessContext.Provider>\r\n          </queryMostFrequentCountContext.Provider>\r\n        </queryMinLengthContext.Provider>\r\n      </queryMaxLengthContext.Provider>\r\n    </dataControllerContext.Provider>\r\n  )\r\n\r\n}\r\n\r\n/**\r\n * React Function that will display the minimum length of words of interest for the query\r\n */\r\nexport const DisplayQueryMinLength = ()=>{\r\n\r\n  const [queryMinLength] = useContext(queryMinLengthContext);\r\n  return (\r\n    <span>{queryMinLength}</span>\r\n  )\r\n\r\n}\r\n/**\r\n * React Function that will display the maximum length of words of interest for the query\r\n */\r\nexport const DisplayQueryMaxLength = ()=>{\r\n\r\n  const [queryMaxLength] = useContext(queryMaxLengthContext);\r\n  return (\r\n    <span>{queryMaxLength}</span>\r\n  )\r\n\r\n}\r\n/**\r\n * React Function that will display the limit to the number of word to return from the query.\r\n * The backend will return this many most frequent words.\r\n */\r\nexport const DisplayQueryMostFrequentParameter = ()=>{\r\n\r\n  const [queryMostFrequent] = useContext(queryMostFrequentCountContext);\r\n  return (\r\n    <span>{queryMostFrequent}</span>\r\n  )\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport './style.css';\r\n\r\ntype Props = {\r\n  text: string,\r\n  setText: (newValue: string) => void,\r\n}\r\n\r\n\r\n\r\nexport const AutoGrowingTextArea = ({ text, setText }: Props) => {\r\n\r\n  // const [value, setValue] = useState<string>(\"\");\r\n\r\n  return (\r\n    <div className=\"autogrowing-textarea-container\">\r\n      \r\n      <div className=\"autogrow-textarea\" data-replicated-value={text}>\r\n        {/* <textarea name=\"text\" id=\"text\" onInput={this.parentNode.dataset.replicatedValue = this.value\"></textarea> */}\r\n        <textarea name=\"autogrowing-textarea\" id=\"autogrowing-textarea\" required rows={1} onInput={evt=>setText((evt.target as HTMLTextAreaElement).value)}></textarea>\r\n        <label htmlFor=\"autogrowing-textarea\">Enter Text to be processed:</label>\r\n      </div>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nAutoGrowingTextArea.defaultProps = {};","import React, { useContext } from \"react\";\r\nimport { AutoGrowingTextArea } from \".\";\r\nimport { queryTextToProcessContext } from \"../../contexts/context\";\r\nimport './style.css';\r\n\r\n\r\n\r\ntype Props = {}\r\nexport const AutoGrowingTextAreaWithContext = () => {\r\n\r\n  const [queryText, setQueryText] = useContext(queryTextToProcessContext);\r\n  return (\r\n    <AutoGrowingTextArea text={queryText} setText={setQueryText}/>\r\n  )\r\n\r\n}\r\nAutoGrowingTextAreaWithContext.defaultProps = {};\r\n","import React from \"react\";\r\nimport './style.css';\r\n\r\ntype Props = {\r\n  value: number,\r\n  setValue: (newValue: number) => void,\r\n}\r\n\r\n\r\nexport const InputWithMovingChangingLabel = ({value, setValue}: Props) => {\r\n\r\n  return (\r\n    <div className=\"input-with-moving-label input-with-moving-and-overriding-label\" >\r\n      \r\n      <input type=\"number\" id=\"input-with-moving-label\" required value={value} onChange={evt => setValue(parseInt((evt.target as HTMLInputElement).value))}/>\r\n      <label htmlFor=\"input-with-moving-label\" className=\"moving-label onfocus-label\">How many entries to retrieve</label>\r\n      <label htmlFor=\"input-with-moving-label\" className=\"moving-label overriding-label\">Retrieve top <span className=\"dynamic-value\">{value}</span> most frequent words</label>\r\n\r\n    </div>\r\n  )\r\n\r\n}\r\nInputWithMovingChangingLabel.defaultProps = {};\r\n\r\n\r\n\r\n\r\n\r\nexport const InputWithMovingLabel = ({value, setValue}: Props) => {\r\n\r\n  return (\r\n    <div className=\"input-with-moving-label\" >\r\n      \r\n      <input type=\"text\" required value={value} onChange={evt => setValue(parseInt((evt.target as HTMLInputElement).value))}/>\r\n      <span className=\"moving-label\">How many entries to retrieve</span>\r\n\r\n    </div>\r\n  )\r\n  \r\n}","import React, { useContext } from \"react\";\r\nimport { InputWithMovingChangingLabel, InputWithMovingLabel } from \".\";\r\nimport { queryMostFrequentCountContext } from \"../../contexts/context\";\r\nimport './style.css';\r\n\r\n\r\n\r\n\r\ntype Props = {\r\n}\r\nexport const InputWithMovingChangingLabelWithContext = () => {\r\n\r\n  const [queryMostFrequent, setQueryMostFrequent] = useContext(queryMostFrequentCountContext);\r\n  return (\r\n    <InputWithMovingChangingLabel value={queryMostFrequent} setValue={setQueryMostFrequent}/>\r\n  )\r\n}\r\nInputWithMovingChangingLabelWithContext.defaultProps = {};\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const InputWithMovingLabelWithContext = () => {\r\n\r\n  const [queryMostFrequent, setQueryMostFrequent] = useContext(queryMostFrequentCountContext);\r\n  return (\r\n    <InputWithMovingLabel value={queryMostFrequent} setValue={setQueryMostFrequent}/>\r\n  )\r\n}\r\nInputWithMovingLabelWithContext.defaultProps = {};","import React from \"react\";\r\nimport './style.css';\r\n\r\ntype Props = {\r\n  rangeLow?: number,\r\n  rangeHigh?: number,\r\n  valueLow: number,\r\n  valueHigh: number,\r\n  setValueLow: (newValue: number) => void,\r\n  setValueHigh: (newValue: number) => void,\r\n}\r\n\r\n\r\nexport const TwoRangeInput = ({ rangeLow, rangeHigh, valueLow, valueHigh, setValueLow, setValueHigh}: Props) => {\r\n\r\n  // const [lowVal, setlowVal] = useState<number>(initialLow || rangeLow);\r\n  // const [highVal, sethighVal] = useState<number>(initialHigh || rangeHigh);\r\n\r\n\r\n  return (\r\n    <div className=\"two-range-input\" style={{\"--a\": valueLow, \"--b\": valueHigh, \"--min\": rangeLow, \"--max\": rangeHigh} as React.CSSProperties}>\r\n    \r\n      <div className=\"track-muted\"></div>\r\n      \r\n      <input id=\"a\" type=\"range\" min={rangeLow} max={rangeHigh} step=\"1\" value={valueLow} onChange={evt => setValueLow(Math.min(parseInt((evt.target as HTMLInputElement).value), valueHigh))} />\r\n      <input id=\"b\" type=\"range\" min={rangeLow} max={rangeHigh} step=\"1\" value={valueHigh} onChange={evt => setValueHigh(Math.max(parseInt((evt.target as HTMLInputElement).value), valueLow))} />\r\n      \r\n      <label htmlFor=\"a\"><output htmlFor=\"a\" style={{\"--val\": \"var(--a)\"} as React.CSSProperties}></output></label>\r\n      <label htmlFor=\"b\"><output htmlFor=\"b\" style={{\"--val\": \"var(--b)\"} as React.CSSProperties}></output></label>\r\n  \r\n    </div>\r\n  )\r\n}\r\n\r\nTwoRangeInput.defaultProps = {\r\n  rangeLow: 0,\r\n  rangeHigh: 100,\r\n  initialLow: 0,\r\n  initialHigh: 100\r\n};","import React, { useContext } from \"react\";\r\nimport { TwoRangeInput } from \".\";\r\nimport { queryMinLengthContext, queryMaxLengthContext } from \"../../contexts/context\";\r\nimport './style.css';\r\n\r\ntype Props = {\r\n  rangeLow?: number,\r\n  rangeHigh?: number\r\n}\r\n\r\n\r\nexport const TwoRangeInputWithContext = ({ rangeLow, rangeHigh }: Props) => {\r\n\r\n  const [queryMinLength, setQueryMinLength] = useContext(queryMinLengthContext);\r\n  const [queryMaxLength, setQueryMaxLength] = useContext(queryMaxLengthContext);\r\n\r\n  console.log({queryMinLength, queryMaxLength})\r\n\r\n  return (\r\n    <TwoRangeInput valueLow={queryMinLength} valueHigh={queryMaxLength} \r\n                   setValueLow={setQueryMinLength} setValueHigh={setQueryMaxLength} \r\n                   rangeLow={rangeLow} rangeHigh={rangeHigh} \r\n    />\r\n  )\r\n}\r\n\r\nTwoRangeInputWithContext.defaultProps = {\r\n  rangeLow: 0,\r\n  rangeHigh: 100\r\n};","import React, { useContext } from \"react\";\r\nimport { dataControllerContext, DisplayQueryMaxLength, DisplayQueryMinLength, DisplayQueryMostFrequentParameter } from \"../../contexts/context\";\r\nimport animateOnScroll from \"../../utils/AnimateOnScroll\";\r\nimport { useIntersect } from \"../../utils/useIntersect\";\r\nimport { scrollIDIntoViewHelper } from \"../../utils/utils\";\r\nimport { AutoGrowingTextAreaWithContext } from \"../AutoGrowingTextArea/withContext\";\r\nimport { InputWithMovingChangingLabelWithContext } from \"../InputWithMovingLabel/withContext\";\r\n// import { TwoRangeInput } from \"../TwoRangeInput\";\r\nimport { TwoRangeInputWithContext } from \"../TwoRangeInput/withContext\";\r\nimport './style.css';\r\n\r\n\r\nexport const Query = () => {\r\n\r\n  \r\n  const [headerRef] = useIntersect({threshold: [.25, .75], onObservedIntersection: animateOnScroll});\r\n  const [textareaRef] = useIntersect({threshold: [.25, .75], onObservedIntersection: animateOnScroll});\r\n  const [summaryRef] = useIntersect({threshold: [.25, .75], onObservedIntersection: animateOnScroll});\r\n  const [inputRef] = useIntersect({threshold: [.25, .75], onObservedIntersection: animateOnScroll});\r\n  const [btnRef] = useIntersect({threshold: [.25, .75], onObservedIntersection: animateOnScroll});\r\n  // const [btnRef, getIntersectionObj] = useIntersect({threshold: [.25, .75], onObservedIntersection: animateOnScroll});\r\n\r\n  const [executeQuery] = useContext(dataControllerContext)\r\n\r\n  // useEffect(()=>{\r\n  //   const interval = setInterval(()=>{\r\n  //     const intersectionObj = getIntersectionObj()\r\n  //     console.log(intersectionObj?.time, intersectionObj?.intersectionRatio, intersectionObj?.rootBounds, intersectionObj?.boundingClientRect, intersectionObj?.intersectionRect, intersectionObj?.isIntersecting)\r\n  //   }, 1000)\r\n\r\n  //   return ()=> clearInterval(interval)\r\n  // })\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"container query__container\">\r\n\r\n\r\n      <div className=\"query__header\" ref={headerRef} data-aos=\"fade-left\">\r\n        <h1>Word Inventorier</h1>\r\n        <h4>Setup Text</h4>\r\n      </div>\r\n\r\n\r\n      <div className=\"query__body\">\r\n        <div className=\"query-input\" ref={textareaRef} data-aos=\"fade-left\">\r\n          <AutoGrowingTextAreaWithContext />\r\n        </div>\r\n        <div className=\"query-controls\">\r\n\r\n          <div className=\"query-summary\" ref={summaryRef} data-aos=\"fade-right\">\r\n            <h3>Query Summary</h3>\r\n            <span>Analyse Text on the left</span>\r\n            <span>Retrieve Top <DisplayQueryMostFrequentParameter /> most frequent words</span>\r\n            <span>With lengths between <DisplayQueryMinLength /> and <DisplayQueryMaxLength /></span>\r\n            \r\n\r\n          </div>\r\n\r\n          <div ref={inputRef} data-aos=\"fade-right\">\r\n            {/* <TwoRangeInput rangeLow={0} rangeHigh={100} /> */}\r\n            <TwoRangeInputWithContext />\r\n            <InputWithMovingChangingLabelWithContext />\r\n          </div>\r\n\r\n\r\n          <a className=\"btn btn--text-icon\" href=\"/\" onClick={evt => { executeQuery(); scrollIDIntoViewHelper(\"results\", evt)}} ref={btnRef} data-aos=\"fade-right\"> \r\n            <i className=\"fas fa-cloud-upload-alt\"></i>\r\n            <span className=\"btn__text\">Submit</span>    \r\n          </a>  \r\n\r\n        </div>\r\n        \r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport animateOnScroll from \"../../utils/AnimateOnScroll\";\r\nimport { thresholdsHelper, useIntersect } from \"../../utils/useIntersect\";\r\nimport './style.css';\r\n\r\n\r\n\r\n\r\ntype Props = {\r\n  category1Header: string,\r\n  category2Header: string,\r\n  onSort: (byCategory1: boolean) => void,\r\n  isCompact?: boolean\r\n}\r\n// TODO: Remove the hardcoded buttons (or just the styles?)\r\nexport const HistogramHeader = ({category1Header, category2Header, onSort, isCompact}: Props)=>{\r\n\r\n  return (\r\n    <div className={`histogram-header ${isCompact ? \"histogram-header-compact \" : \" \"}`}>\r\n      <div className=\"half-item half-item--left\">\r\n        <span className=\"histogram-btn\" onClick={()=> onSort(true)}><i className=\"fas fa-filter\"></i></span>\r\n        <span>{category1Header}</span>\r\n      </div>\r\n      <div className=\"half-item half-item--right\">\r\n        <span>{category2Header}</span>\r\n        <span className=\"histogram-btn\" onClick={()=> onSort(false)}><i className=\"fas fa-filter\"></i></span>\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n}\r\nHistogramHeader.defaultProps = {\r\n  category1Header: \"Length\",\r\n  category2Header: \"Frequency\",\r\n}\r\n\r\n\r\n\r\n\r\n\r\ntype DataPropsContainer = {\r\n  data: DataProps[],\r\n  category1Maximum?: number,\r\n  category2Maximum?: number,\r\n  isCompact?: boolean\r\n}\r\ntype DataProps = {\r\n  label?: string,\r\n  category1Value: number,\r\n  category1Annotation?: string,\r\n  category2Value: number,\r\n  category2Annotation?: string,\r\n  \r\n}\r\n\r\n\r\nexport const HistogramData = ({data, category1Maximum, category2Maximum, isCompact}: DataPropsContainer) => {\r\n\r\n  const category1Max = category1Maximum ? category1Maximum : Math.max(...data.map(item => item.category1Value))\r\n  const category2Max = category2Maximum ? category2Maximum : Math.max(...data.map(item => item.category2Value))\r\n\r\n  const [graphRef] = useIntersect({threshold: [.25, .75], onObservedIntersection: (entry) => animateOnScroll(entry, \"histogram-visible\")});\r\n\r\n  return (\r\n    <div className={`histogram-container ${isCompact ? \"histogram-compact \" : \" \"}`} ref={graphRef}>\r\n\r\n      {\r\n        data.map((item, index) => (\r\n          true\r\n          ? ( <HistogramDataItem  label={item.label} \r\n                                category1Value={item.category1Value} \r\n                                category1Maximum={category1Max} \r\n                                category1Annotation={item.category1Annotation} \r\n                                category2Value={item.category2Value} \r\n                                category2Maximum={category2Max} \r\n                                category2Annotation={item.category2Annotation}\r\n                                key={index}\r\n                                />\r\n            )\r\n          : ( <HistogramDataItem category1Value={item.category2Value} \r\n                                 category1Maximum={category2Max} \r\n                                 category2Value={item.category1Value} \r\n                                 category2Maximum={category1Max} \r\n                                 key={index}\r\n                                 />\r\n\r\n            )\r\n\r\n          )\r\n        )\r\n      }\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\ntype ItemProps = {\r\n  label?: string,\r\n  category1Value: number,\r\n  category1Maximum: number,\r\n  category1Annotation?: string,\r\n  category2Value: number,\r\n  category2Maximum: number,\r\n  category2Annotation?: string,\r\n  isCompact?: false\r\n}\r\nexport const HistogramDataItem = ({\r\n  label, \r\n  category1Value, category1Annotation, category1Maximum,\r\n  category2Value, category2Annotation, category2Maximum,\r\n}: ItemProps) => {\r\n\r\n  const [graphRef] = useIntersect({threshold: thresholdsHelper(4), onObservedIntersection: (entry) => animateOnScroll(entry, \"histogram-visible\")});\r\n\r\n  return (\r\n\r\n    <div className=\"histogram-bar-container\" ref={graphRef}>\r\n\r\n      <span className=\"histogram-bar-label\"><span>{label}</span></span>\r\n\r\n\r\n      <div className=\"histogram-bar histogram-bar--left\">\r\n        <span className=\"histogram-bar__item\"></span>\r\n        <span className=\"histogram-bar__item histogram-bar__item--main\" style={{flexBasis: `${100 * category1Value/category1Maximum}%`}}>\r\n          {category1Annotation && <span className=\"histogram-bar__text histogram-bar__text--muted\">{category1Annotation}</span>}\r\n          <span className=\"histogram-bar__text\">{category1Value}</span>\r\n        </span>\r\n      </div>\r\n\r\n\r\n      <div className=\"histogram-bar histogram-bar--right\">\r\n        <span className=\"histogram-bar__item histogram-bar__item--main\" style={{flexBasis: `${100 * category2Value/category2Maximum}%`}}>\r\n          <span className=\"histogram-bar__text\">{category2Value}</span>\r\n          {category2Annotation && <span className=\"histogram-bar__text histogram-bar__text--muted\">{category2Annotation}</span>}\r\n        </span>\r\n        <span className=\"histogram-bar__item\"></span>\r\n      </div>\r\n\r\n    </div>\r\n\r\n  )\r\n}","import React, { useContext, useState } from \"react\";\r\nimport { dataControllerContext, queryResultsContext } from \"../../contexts/context\";\r\nimport { TTokenSummary } from \"../../data.controller/data.types\";\r\nimport animateOnScroll from \"../../utils/AnimateOnScroll\";\r\nimport { thresholdsHelper, useIntersect } from \"../../utils/useIntersect\";\r\nimport { scrollIDIntoViewHelper } from \"../../utils/utils\";\r\nimport { CSSLoaderDualRing } from \"../CSSLoaders\";\r\nimport { HistogramData, HistogramHeader } from \"../Histogram/TwoCategorySymmetricHistogram\";\r\nimport './style.css';\r\ntype SortParameters = {\r\n  byLength: boolean,\r\n  directionIsAscending: boolean,\r\n}\r\nexport const Details = () => {\r\n\r\n  const [sortParameters, setSortParameters] = useState<SortParameters>({byLength: false, directionIsAscending: false});\r\n  const [, waitingForServer] = useContext(dataControllerContext)\r\n  const queryResultsFromContext = useContext(queryResultsContext)\r\n  const queryResults = queryResultsFromContext ? [...queryResultsFromContext.results[0].data] : []\r\n\r\n\r\n  const mostFrequent: TTokenSummary = queryResultsFromContext ? {...queryResultsFromContext.mostFrequentWord} : { key: \"\", length: 0, frequency: 0 }\r\n  const longest: TTokenSummary = queryResultsFromContext ? {...queryResultsFromContext.longestWord} : { key: \"\", length: 0, frequency: 0 }\r\n\r\n\r\n  sortParameters.byLength && queryResults.sort((a, b) => (a.length - b.length) * (sortParameters.directionIsAscending ? 1 : -1))\r\n  !sortParameters.byLength && queryResults.sort((a, b) => (a.frequency - b.frequency) * (sortParameters.directionIsAscending ? 1 : -1))\r\n\r\n\r\n  const [titleRef] = useIntersect({threshold: thresholdsHelper(4), onObservedIntersection: animateOnScroll});\r\n  const [graphRef] = useIntersect({threshold: thresholdsHelper(4), onObservedIntersection: animateOnScroll});\r\n  const [group1Ref] = useIntersect({threshold: thresholdsHelper(100), onObservedIntersection: animateOnScroll});\r\n  const [group2Ref] = useIntersect({threshold: thresholdsHelper(100), onObservedIntersection: animateOnScroll});\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"container details__container\">\r\n\r\n\r\n      <div className=\"details__header\">\r\n        <h1 ref={titleRef} data-aos=\"fade-up\">\r\n          <a className=\"btn btn--icon btn--secondary\" href=\"/\" onClick={evt => { scrollIDIntoViewHelper(\"results\", evt)}}> \r\n            <i className=\"fas fa-angle-left\"></i> \r\n          </a>  \r\n\r\n          <span>Summary</span>\r\n\r\n          <span className=\"btn btn--icon btn--secondary\"></span>\r\n        </h1>\r\n      </div>\r\n\r\n\r\n\r\n\r\n      <div className={`details__body ${waitingForServer ? \"details__body--processing\": \"\"}`}>\r\n        <div className=\"details__processing\">\r\n          <p>We're processing your request.<br/>This shouldn't take more than a few moments...</p>\r\n          <CSSLoaderDualRing />\r\n        </div>\r\n        \r\n        \r\n        \r\n        \r\n        \r\n        <div className=\"details__data\"  >\r\n\r\n          <div className=\"details__data-graph\" ref={graphRef} data-aos=\"fade-left\">\r\n            <HistogramHeader onSort={\r\n              (newValue) => setSortParameters(\r\n                (current) => { \r\n                  current.directionIsAscending = (current.byLength === newValue) ? !current.directionIsAscending : current.directionIsAscending;\r\n                  current.byLength = newValue;\r\n                  return {...current}\r\n                }\r\n              )}  isCompact={true}/>\r\n              \r\n            <HistogramData data={[...queryResults.map((item) => {\r\n                return { category1Value: item.length, category1Annotation: \"\", category2Value: item.frequency, category2Annotation: \"\"}\r\n              })]} category1Maximum={longest.length} category2Maximum={mostFrequent.frequency} isCompact={true}/>  \r\n          </div>\r\n\r\n\r\n          <div className=\"details__data-text\">\r\n\r\n            <div className=\"details__data-text__group\">\r\n              <h2>Text Processing Results</h2>\r\n              <div className=\"details__data-text__subgroup\" ref={group1Ref} data-aos=\"fade-right\">\r\n                <h3>Text Meta Data</h3>\r\n                <div><span>Text ID: </span><span>{queryResultsFromContext?.id}</span></div>\r\n                <div><span>Text Type: </span><span>{queryResultsFromContext?.idType}</span></div>\r\n                <div><span>Text Info: </span><span>{queryResultsFromContext?.meta}</span></div>\r\n                <div><span>Text was Submitted at: </span><span>{queryResultsFromContext?._createdAt}</span></div>\r\n                <div><span>Text was Processed In: </span><span>{((queryResultsFromContext?.summaryDurationSec || 0) / 1000).toFixed(2)}sec</span></div>\r\n              </div>\r\n              <div className=\"details__data-text__subgroup\">\r\n                <h3>Text Summary</h3>\r\n                <div><span>Word Count: </span><span>{queryResultsFromContext?.wordsCount}</span></div>\r\n                <div><span>Unique Words: </span><span>{queryResultsFromContext?.uniqueWordsCount}</span></div>\r\n                <div><span>Most Frequent Word: </span><span><span>{queryResultsFromContext?.mostFrequentWord.key}</span><span><span><span>Frequency: </span>{queryResultsFromContext?.mostFrequentWord.frequency}</span><span><span>Length: </span>{queryResultsFromContext?.mostFrequentWord.length}</span></span></span></div>\r\n                <div><span>Least Frequent Word: </span><span><span>{queryResultsFromContext?.leastFrequentWord.key}</span><span><span><span>Frequency: </span>{queryResultsFromContext?.leastFrequentWord.frequency}</span><span><span>Length: </span>{queryResultsFromContext?.leastFrequentWord.length}</span></span></span></div>\r\n                <div><span>Longest Word: </span><span><span>{queryResultsFromContext?.longestWord.key}</span><span><span><span>Frequency: </span>{queryResultsFromContext?.longestWord.frequency}</span><span><span>Length: </span>{queryResultsFromContext?.longestWord.length}</span></span></span></div>\r\n                <div><span>Shortest Word: </span><span><span>{queryResultsFromContext?.shortestWord.key}</span><span><span><span>Frequency: </span>{queryResultsFromContext?.shortestWord.frequency}</span><span><span>Length: </span>{queryResultsFromContext?.shortestWord.length}</span></span></span></div>\r\n              </div>\r\n            </div>\r\n\r\n\r\n            <div className=\"details__data-text__group\" ref={group2Ref} data-aos=\"fade-right\">\r\n              <h2>Query Processing Results</h2>\r\n              <div className=\"details__data-text__subgroup\">\r\n                <h3>Query Parameters</h3>\r\n                <div><span>Most Frequent Tokens Retrieved: </span><span>{queryResultsFromContext?.results[0].uiQuery.topN}</span></div>\r\n                <div><span>Token Minimum Length: </span><span>{queryResultsFromContext?.results[0].uiQuery.minLength}</span></div>\r\n                <div><span>Token Maximum Length: </span><span>{queryResultsFromContext?.results[0].uiQuery.maxLength}</span></div>\r\n              </div>\r\n              <div className=\"details__data-text__subgroup\">\r\n                <h3>Query Summary</h3>\r\n                <div><span>Query was Submitted at: </span><span>{queryResultsFromContext?.results[0]._createdAt}</span></div>\r\n                <div><span>Query was Processed in: </span><span>{((queryResultsFromContext?.results[0].durationMs || 0) / 1000).toFixed(2)}sec</span></div>\r\n              </div>\r\n            </div>\r\n\r\n\r\n\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React, { useContext, useState } from \"react\";\r\nimport { dataControllerContext, queryResultsContext } from \"../../contexts/context\";\r\nimport { TTokenSummary } from \"../../data.controller/data.types\";\r\nimport { scrollIDIntoViewHelper } from \"../../utils/utils\";\r\nimport { CSSLoaderDualRing } from \"../CSSLoaders\";\r\nimport { \r\n  TwoCategorySymmetricHistogramHeader as HistogramHeader,\r\n  TwoCategorySymmetricHistogramData as HistogramData,\r\n} from \"../Histogram\";\r\n// import { InputWithMovingChangingLabelWithContext } from \"../InputWithMovingLabel/withContext\";\r\n// import { TwoRangeInputWithContext } from \"../TwoRangeInput/withContext\";\r\nimport './style.css';\r\n\r\ntype SortParameters = {\r\n  byLength: boolean,\r\n  directionIsAscending: boolean,\r\n}\r\nexport const Results = () => {\r\n\r\n  const [sortParameters, setSortParameters] = useState<SortParameters>({byLength: false, directionIsAscending: false});\r\n\r\n  const [, waitingForServer] = useContext(dataControllerContext)\r\n  const queryResultsFromContext = useContext(queryResultsContext)\r\n  const queryResults = queryResultsFromContext ? [...queryResultsFromContext.results[0].data] : []\r\n\r\n  const mostFrequent: TTokenSummary = queryResultsFromContext ? {...queryResultsFromContext.mostFrequentWord} : { key: \"\", length: 0, frequency: 0 }\r\n  const leastFrequent: TTokenSummary = queryResultsFromContext ? {...queryResultsFromContext.leastFrequentWord} : { key: \"\", length: 0, frequency: 0 }\r\n  const longest: TTokenSummary = queryResultsFromContext ? {...queryResultsFromContext.longestWord} : { key: \"\", length: 0, frequency: 0 }\r\n  const shortest: TTokenSummary = queryResultsFromContext ? {...queryResultsFromContext.shortestWord} : { key: \"\", length: 0, frequency: 0 }\r\n\r\n\r\n  console.log({...sortParameters})\r\n  sortParameters.byLength && queryResults.sort((a, b) => (a.length - b.length) * (sortParameters.directionIsAscending ? 1 : -1))\r\n  !sortParameters.byLength && queryResults.sort((a, b) => (a.frequency - b.frequency) * (sortParameters.directionIsAscending ? 1 : -1))\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"container results__container\">\r\n\r\n\r\n      <div className=\"results__header\">\r\n        <h1>\r\n          <a className=\"btn btn--icon btn--secondary\" href=\"/\" onClick={evt => { scrollIDIntoViewHelper(\"query\", evt) }}> \r\n            <i className=\"fas fa-angle-left\"></i> \r\n          </a>  \r\n\r\n          <span>Results</span>\r\n\r\n          {\r\n            waitingForServer \r\n            ? (\r\n              <span className=\"btn btn--icon btn--secondary\"></span>\r\n            )\r\n            : (\r\n              <a className=\"btn btn--icon btn--secondary\" href=\"/\" onClick={evt => { scrollIDIntoViewHelper(\"details\", evt) }}> \r\n                <i className=\"fas fa-angle-right\"></i>  \r\n              </a>  \r\n            )\r\n          }\r\n\r\n        </h1>\r\n      </div>\r\n\r\n\r\n\r\n\r\n      <div className={`results__body ${waitingForServer ? \"results__body--processing\": \"\"}`}>\r\n\r\n\r\n        <div className=\"results__processing\">\r\n          <p>We're processing your request.<br/>This shouldn't take more than a few moments...</p>\r\n          <CSSLoaderDualRing />\r\n        </div>\r\n\r\n        \r\n        <div className=\"results__data\">\r\n  \r\n          <HistogramHeader onSort={\r\n            (newValue) => setSortParameters(\r\n              (current) => { \r\n                current.directionIsAscending = (current.byLength === newValue) ? !current.directionIsAscending : current.directionIsAscending;\r\n                current.byLength = newValue;\r\n                return {...current}\r\n              }\r\n            )}/>\r\n\r\n          <HistogramData data={[\r\n              { label: mostFrequent.key, category1Value: mostFrequent.length, category1Annotation: \"\", category2Value: mostFrequent.frequency, category2Annotation: \"Most Frequent\"},\r\n              { label: leastFrequent.key, category1Value: leastFrequent.length, category1Annotation: \"Least Frequent\", category2Value: leastFrequent.frequency, category2Annotation: \"\"},\r\n              { label: longest.key, category1Value: longest.length, category1Annotation: \"Longest\", category2Value: longest.frequency, category2Annotation: \"\"},\r\n              { label: shortest.key, category1Value: shortest.length, category1Annotation: \"\", category2Value: shortest.frequency, category2Annotation: \"Shortest\"},\r\n            ]}/>\r\n\r\n          <hr/>\r\n\r\n          <HistogramData data={[...queryResults.map((item) => {\r\n            return { label: item.key, category1Value: item.length, category1Annotation: \"\", category2Value: item.frequency, category2Annotation: \"\"}\r\n          })]} category1Maximum={longest.length} category2Maximum={mostFrequent.frequency}/>  \r\n        </div>\r\n\r\n        \r\n        {/* <div className=\"results__controls\" ref={inputRef} data-aos=\"fade-right\"> */}\r\n          {/* <TwoRangeInputWithContext /> */}\r\n          {/* <p>Adjust Range of Lengths on Query</p> */}\r\n          {/* <InputWithMovingChangingLabelWithContext /> */}\r\n        {/* </div> */}\r\n\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}","import { useLayoutEffect } from \"react\";\r\nimport { scrollURLIDIntoViewHelper } from \"./utils\";\r\n\r\n\r\n// https://reactrouter.com/web/guides/scroll-restoration\r\n// React router does not reliably handle scrolling to the current element \r\n// When we need to resort to doing it ourselves, this component when rendered will force a scroll to top\r\n\r\n\r\ntype Props = {\r\n  timeout?: number // This timeout is caused by the \"transition: all .3s\" that's applying to everything from css\r\n}\r\nexport default function ScrollToURI({timeout}: Props) {\r\n  \r\n  useLayoutEffect(() => {\r\n\r\n    // Define, Register and Pre-run a callback for scrolling\r\n    const callback = () => setTimeout(scrollURLIDIntoViewHelper, timeout || 305)\r\n    window.addEventListener('resize', callback);\r\n    callback();\r\n\r\n    // Return object to cleanup effect\r\n    return () => window.removeEventListener('resize', callback);\r\n\r\n  // Explicitely state dependency (otherwise a warning is generated)\r\n  }, [timeout]);\r\n\r\n  \r\n  return null;\r\n}","import React, { useContext } from 'react';\r\nimport { BrowserRouter, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport './App.css';\r\nimport './utils/AnimateOnScroll/style.css';\r\n// import { TUIQueryItem, TTextSummary } from './data.controller/data.types';\r\nimport { Home } from './components/Home';\r\nimport { Query } from './components/Query';\r\nimport { Details } from './components/Details';\r\nimport { Results } from './components/Results';\r\nimport ScrollToURI from './utils/ScrollToURI';\r\nimport { dataControllerContext, queryResultsContext } from './contexts/context';\r\nimport animateOnScroll from './utils/AnimateOnScroll';\r\nimport { useIntersect, thresholdsHelper } from './utils/useIntersect';\r\n\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n  const [,waitingForServer,dataController] = useContext(dataControllerContext)\r\n  console.log('[App]: Data Controller Version: ', dataController.getVersion())\r\n\r\n  const queryResultsFromContext = useContext(queryResultsContext)\r\n  const [h1Ref] = useIntersect({threshold: thresholdsHelper(4), onObservedIntersection: animateOnScroll});\r\n  const [pRef] = useIntersect({threshold: thresholdsHelper(4), onObservedIntersection: animateOnScroll});\r\n  const [msgRef] = useIntersect({threshold: thresholdsHelper(4), onObservedIntersection: animateOnScroll});\r\n  const [linksRef] = useIntersect({threshold: thresholdsHelper(4), onObservedIntersection: animateOnScroll});\r\n\r\n\r\n  return (\r\n    <main className=\"App\">\r\n        <ScrollToURI timeout={0} />\r\n        <BrowserRouter>\r\n          \r\n\r\n          <Switch>\r\n            <Route exact path=\"/home\">\r\n              <div id=\"home\" className=\"screen screen-1\">\r\n                <Home />\r\n              </div>\r\n            </Route>\r\n            <Redirect from=\"/*\" to=\"/home\" />\r\n          </Switch>\r\n\r\n\r\n\r\n          <div id=\"query\" className=\"screen screen-2\">\r\n            <Query />\r\n          </div>\r\n\r\n          <div id=\"results\" className=\"screen screen-3\">\r\n            { (queryResultsFromContext || waitingForServer) && <Results />}\r\n          </div>\r\n          \r\n          <div id=\"details\" className=\"screen screen-4\">\r\n            { (queryResultsFromContext || waitingForServer) && <Details />}\r\n          </div>\r\n\r\n          <div id=\"footer\" className=\"screen screen--footer\">\r\n            <h1 ref={h1Ref} data-aos=\"fade-down\">Word Inventorier App</h1>\r\n            <p ref={pRef} data-aos=\"fade-right\" className=\"app-details\">\r\n              <span>Author: </span><span>Stephan K.</span>\r\n              <span>Github Repository: </span><span><a href=\"https://github.com/KMurphs/word-inventorier\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/KMurphs/word-inventorier</a></span>\r\n            </p>\r\n\r\n            <h2>Contact Me</h2>\r\n            <div ref={msgRef} data-aos=\"fade-left\" className=\"contact-message\"><p>Want to chat? Or have you got a question/Suggestion? <br/>Drop me a message. I'm always happy to engage with the community</p></div>\r\n            <div ref={linksRef} data-aos=\"zoom-out\" className=\"contact-links\">\r\n              <a href=\"https://github.com/KMurphs\" target=\"_blank\" rel=\"noopener noreferrer\"><i className=\"fab fa-github\"></i></a>\r\n              <a href=\"https://twitter.com/murphs_k\" target=\"_blank\" rel=\"noopener noreferrer\"><i className=\"fab fa-twitter\"></i></a>\r\n              <a href=\"https://www.linkedin.com/in/stephane-kibonge/\" target=\"_blank\" rel=\"noopener noreferrer\"><i className=\"fab fa-linkedin\"></i></a>\r\n              <a href=\"https://codepen.io/kmurphs\" target=\"_blank\" rel=\"noopener noreferrer\"><i className=\"fab fa-codepen\"></i></a>\r\n            </div>\r\n\r\n          </div>\r\n\r\n        </BrowserRouter> \r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { AppContextProvider } from './contexts/context';\r\n\r\nReactDOM.render(\r\n  <AppContextProvider>\r\n    <App />\r\n  </AppContextProvider>\r\n\r\n, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}